<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="4">
  <HTTPTask id="19" hostname="demo.borland.com" path="/InsuranceWebExtJS/agent_lookup.jsf" url="http://demo.borland.com/InsuranceWebExtJS/agent_lookup.jsf" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15233" connectionId="1828" origin="Primary" encodingType="ANSI" startDateTime="2019-02-27T16:49:28.988+05:30" startTime="3629" endTime="3825" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
    <HTTPRequest method="POST">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVk</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTUw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UE9TVCAvSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZiBIVFRQLzEuMQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClJlZmVyZXI6IGh0dHA6Ly9kZW1vLmJvcmxhbmQuY29tL0luc3VyYW5jZVdlYkV4dEpTL2FnZW50X2xvb2t1cC5qc2YNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Mi4wLjM2MjYuMTE5IFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQWNjZXB0OiAqLyoNCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkhvc3Q6IGRlbW8uYm9ybGFuZC5jb20NCkNvb2tpZTogSlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCDQpDb250ZW50LUxlbmd0aDogMTUwDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="JSESSIONID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>emlwLXNlYXJjaD16aXAtc2VhcmNoJnppcC1zZWFyY2glM0F6aXBjb2RlPTUwODIxMiZ6aXAtc2VhcmNoJTNBc2VhcmNoLXppcGNvZGUueD01MiZ6aXAtc2VhcmNoJTNBc2VhcmNoLXppcGNvZGUueT02JmphdmF4LmZhY2VzLlZpZXdTdGF0ZT1qX2lkNCUzQWpfaWQ1</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>2030</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Cache-Control" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsbXVzdC1yZXZhbGlkYXRl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Expires" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCA4IEF1ZyAyMDAwIDEwOjAwOjAwIEdNVA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Powered-By" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNGLzEuMg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Powered-By" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QVNQLk5FVA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0FNRU9SSUdJTg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjAzMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSxtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkV4cGlyZXM6IE1vbiwgOCBBdWcgMjAwMCAxMDowMDowMCBHTVQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KU2VydmVyOiBNaWNyb3NvZnQtSUlTLzcuNQ0KWC1Qb3dlcmVkLUJ5OiBKU0YvMS4yDQpYLVBvd2VyZWQtQnk6IEFTUC5ORVQNClgtRlJBTUUtT1BUSU9OUzogU0FNRU9SSUdJTg0KRGF0ZTogV2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQNCkNvbnRlbnQtTGVuZ3RoOiAyMDMwDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiID4KPGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPiAgIAogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPkluc3VyYW5jZVdlYjogQWdlbnQgTGlzdDwvdGl0bGU+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1MYW5ndWFnZSIgY29udGVudD0iZW4iIC8+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0icHJhZ21hIiBjb250ZW50PSJuby1jYWNoZSIgLz4KICAgICAgICA8bWV0YSBodHRwLWVxdWl2PSJjYWNoZS1jb250cm9sIiBjb250ZW50PSJuby1jYWNoZSIgLz4gIAogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9ImV4cGlyZXMiIGNvbnRlbnQ9Ii0xIiAvPgogICAgICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiAvPgogICAgICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiAvPgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImV4dC9yZXNvdXJjZXMvY3NzL2V4dC1hbGwuY3NzIiAvPgogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImNzcy9zdHlsZS5jc3MiIC8+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iZXh0L2FkYXB0ZXIvZXh0L2V4dC1iYXNlLWRlYnVnLmpzIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJleHQvZXh0LWFsbC1kZWJ1Zy5qcyI+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iamF2YXNjcmlwdC9zZXJpYWxpemVyLmpzIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJqYXZhc2NyaXB0L21lbnUuanMiPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImphdmFzY3JpcHQvYWdlbnRUYWJsZS5qcyI+PC9zY3JpcHQ+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8ZGl2IGlkPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGlkPSJoZWFkZXIiPjxkaXYgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPgogICAgCiAgICA8ZGl2IGlkPSJoZWFkZXIiPgogICAgICAmbmJzcDsgCiAgICA8L2Rpdj4KICAgIAo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0ibmF2aWdhdGlvbiI+PGRpdiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CiAgICAKICAgIDxkaXYgaWQ9Im5hdiI+CiAgICAgIDx1bD4KICAgICAgICA8bGkgaWQ9ImhvbWUiPjxhIGhyZWY9ImluZGV4LmpzZiI+SG9tZTwvYT48L2xpPiAgICAgICAgCiAgICAgICAgPGxpPgo8Zm9ybSBpZD0iTGlua2Zvcm0iIG5hbWU9Ikxpbmtmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL0luc3VyYW5jZVdlYkV4dEpTL2FnZW50X2xpc3QuanNmIiBlbmN0eXBlPSJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJMaW5rZm9ybSIgdmFsdWU9Ikxpbmtmb3JtIiAvPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGxhbmd1YWdlPSJKYXZhc2NyaXB0Ij5mdW5jdGlvbiBkcGYoZikge3ZhciBhZHAgPSBmLmFkcDtpZiAoYWRwICE9IG51bGwpIHtmb3IgKHZhciBpID0gMDtpIDwgYWRwLmxlbmd0aDtpKyspIHtmLnJlbW92ZUNoaWxkKGFkcFtpXSk7fX19O2Z1bmN0aW9uIGFwZihmLCBwdnApIHt2YXIgYWRwID0gbmV3IEFycmF5KCk7Zi5hZHAgPSBhZHA7dmFyIHBzID0gcHZwLnNwbGl0KCcsJyk7Zm9yICh2YXIgaSA9IDAsaWkgPSAwO2kgPCBwcy5sZW5ndGg7aSsrLGlpKyspIHt2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7cC50eXBlID0gImhpZGRlbiI7cC5uYW1lID0gcHNbaV07cC52YWx1ZSA9IHBzW2kgKyAxXTtmLmFwcGVuZENoaWxkKHApO2FkcFtpaV0gPSBwO2kgKz0gMTt9fTtmdW5jdGlvbiBqc2ZjbGpzKGYsIHB2cCwgdCkge2FwZihmLCBwdnApO3ZhciBmdCA9IGYudGFyZ2V0O2lmICh0KSB7Zi50YXJnZXQgPSB0O31mLnN1Ym1pdCgpO2YudGFyZ2V0ID0gZnQ7ZHBmKGYpO307PC9zY3JpcHQ+CjxhIGhyZWY9IiMiIG9uY2xpY2s9ImlmKHR5cGVvZiBqc2ZjbGpzID09ICdmdW5jdGlvbicpe2pzZmNsanMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0xpbmtmb3JtJyksJ0xpbmtmb3JtOmpfaWQ2LExpbmtmb3JtOmpfaWQ2JywnJyk7fXJldHVybiBmYWxzZSI+QWNjb3VudDwvYT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJqYXZheC5mYWNlcy5WaWV3U3RhdGUiIGlkPSJqYXZheC5mYWNlcy5WaWV3U3RhdGUiIHZhbHVlPSJqX2lkNDpqX2lkNiIgLz4KPC9mb3JtPjwvbGk+ICAgICAgICAgICAgICAgIAogICAgICAgIDxsaSBpZD0iY29udGFjdCI+PGEgaHJlZj0iY29udGFjdC5qc2YiPkNvbnRhY3QgVXM8L2E+PC9saT4KICAgICAgPC91bD4KICAgIDwvZGl2PgogICAgCiAgICA8ZGl2IGlkPSJxdWlja2xpbmsiPjxkaXYgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPgo8Zm9ybSBpZD0icXVpY2stbGluayIgbmFtZT0icXVpY2stbGluayIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9JbnN1cmFuY2VXZWJFeHRKUy9hZ2VudF9saXN0LmpzZiIgZW5jdHlwZT0iYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icXVpY2stbGluayIgdmFsdWU9InF1aWNrLWxpbmsiIC8+CjxzZWxlY3QgaWQ9InF1aWNrLWxpbms6anVtcC1tZW51IiBuYW1lPSJxdWljay1saW5rOmp1bXAtbWVudSIgc2l6ZT0iMSIgb25jaGFuZ2U9Ik1NX2p1bXBNZW51KCdwYXJlbnQnLHRoaXMsMCkiPgk8b3B0aW9uIHZhbHVlPSIjIj5DaG9vc2UgT25lPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJxdW90ZV9hdXRvLmpzZiI+QXV0byBRdW90ZTwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0iYWdlbnRfbG9va3VwLmpzZiI+QWdlbnQgTG9va3VwPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJhZ2VudF9sb29rdXBfeG1sLmpzZiI+QWdlbnQgTG9va3VwIChYTUwpPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJub3RJbXBsWWV0LmpzZiI+VGVybSBMaWZlIFF1b3RlPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJub3RJbXBsWWV0LmpzZiI+UXVvdGUgSG9tZW93bmVyczwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0ibm90SW1wbFlldC5qc2YiPlJldHJpZXZlIFNhdmVkIFF1b3RlPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJub3RJbXBsWWV0LmpzZiI+UmVwb3J0IENsYWltPC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJub3RJbXBsWWV0LmpzZiI+VHJhY2sgQ2xhaW08L29wdGlvbj4KPC9zZWxlY3Q+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iamF2YXguZmFjZXMuVmlld1N0YXRlIiBpZD0iamF2YXguZmFjZXMuVmlld1N0YXRlIiB2YWx1ZT0ial9pZDQ6al9pZDYiIC8+CjwvZm9ybT4gICAgCjwvZGl2PiAgICAgICAgICAgIAogICAgPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgIAogICAgPGRpdiBjbGFzcz0ibGluZSI+PC9kaXY+CiAgICAKICAgIDxkaXYgaWQ9ImxlZnQtbmF2Ij4KICAgIAk8aW1nIHNyYz0iaW1hZ2VzL3RpbGVzVi5wbmciIC8+CiAgICA8L2Rpdj4JCiAgICAKPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50LW1haW4iPgo8Zm9ybSBpZD0iYWdlbnQtbGlzdCIgbmFtZT0iYWdlbnQtbGlzdCIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9JbnN1cmFuY2VXZWJFeHRKUy9hZ2VudF9saXN0LmpzZiIgZW5jdHlwZT0iYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWdlbnQtbGlzdCIgdmFsdWU9ImFnZW50LWxpc3QiIC8+CiAgICAgICAgCiAgICAgICAgICAgIDxoMT5JbnN1cmFuY2UgQWdlbnQgU2VhcmNoIFJlc3VsdHMgPC9oMT4KICAgICAgICAgICAgPGJyIC8+PHRhYmxlPjx0ciBjbGFzcz0ibWVzc2FnZS1pbmZvIj48dGQ+CUNvdWxkIG5vdCByZXRyaWV2ZSBBZ2VudHMgd2l0aCBnaXZlbiBaaXAgQ29kZSwgaGVyZSBpcyB0aGUgbGlzdCBvZiBhbGwgYXZhaWxhYmxlIEFnZW50cyA8L3RkPjwvdHI+PC90YWJsZT4KICAgICAgICAgICAgPGRpdiBpZD0iYWdlbnRUYWJsZURJViI+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iamF2YXguZmFjZXMuVmlld1N0YXRlIiBpZD0iamF2YXguZmFjZXMuVmlld1N0YXRlIiB2YWx1ZT0ial9pZDQ6al9pZDYiIC8+CjwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0iZm9vdGVyIj48ZGl2IHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KICAgIAogICAgPGRpdiBjbGFzcz0iY29sdW1uLWxlZnQiPgogICAgICAgIFRoaXMgc2l0ZSBpcyBhIGZpY3RpdGlvdXMgcmVwcmVzZW50YXRpb248YnIgLz4KICAgICAgICBvZiBhbiBvbmxpbmUgY29tcGFueSBmb3IgdGhlIHB1cnBvc2Ugb2YgZGVtb25zdHJhdGluZyBCb3JsYW5kIFNvbHV0aW9ucwogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2x1bW4tcmlnaHQiPgogICAgICAgIDxhIGhyZWY9ImluZGV4LmpzZiI+SG9tZTwvYT4gLSAgICAgICAgCiAgICAgICAgPGEgaHJlZj0id2Vic2VydmljZXMuanNmIj5XZWJzZXJ2aWNlPC9hPiAtCiAgICAgICAgPCEtLSA8YSBocmVmPSJzZXR0aW5ncy5qc2YiPlNldHRpbmdzPC9hPiAtIC0tPgogICAgICAgIDxhIGhyZWY9ImNvbnRhY3QuanNmIj5Db250YWN0IFVzPC9hPgogICAgPC9kaXY+CiAgICAKPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PiAKICAgIDwvYm9keT4KPC9odG1sPg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPResponse>
    <HTTPTask id="20" hostname="demo.borland.com" path="/InsuranceWebExtJS/ext/resources/css/ext-all.css" url="http://demo.borland.com/InsuranceWebExtJS/ext/resources/css/ext-all.css" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15234" connectionId="1784" origin="HTML" encodingType="ANSI" ordinal="1" startDateTime="2019-02-27T16:49:29.185+05:30" startTime="3826" endTime="4057" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Referer" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9JbnN1cmFuY2VXZWJFeHRKUy9leHQvcmVzb3VyY2VzL2Nzcy9leHQtYWxsLmNzcyBIVFRQLzEuMQ0KUmVmZXJlcjogaHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpBY2NlcHQ6ICovKg0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KSG9zdDogZGVtby5ib3JsYW5kLmNvbQ0KQ29va2llOiBKU0VTU0lPTklEPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCOyBVc2VyU2Vzc2lvbkZpbHRlci5zZXNzaW9uSWQ9RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUINCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>31656</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAyMSBKYW4gMjAxMyAxMjozMDo1NCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMTM5NTkxLTEzNTg3NzE0NTQwMDAi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzE2NTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvY3NzDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpMYXN0LU1vZGlmaWVkOiBNb24sIDIxIEphbiAyMDEzIDEyOjMwOjU0IEdNVA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6IFcvIjEzOTU5MS0xMzU4NzcxNDU0MDAwIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpTZXJ2ZXI6IE1pY3Jvc29mdC1JSVMvNy41DQpYLVBvd2VyZWQtQnk6IEFTUC5ORVQNClgtRlJBTUUtT1BUSU9OUzogU0FNRU9SSUdJTg0KRGF0ZTogV2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQNCkNvbnRlbnQtTGVuZ3RoOiAzMTY1Ng0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="21" hostname="demo.borland.com" path="/InsuranceWebExtJS/ext/adapter/ext/ext-base-debug.js" url="http://demo.borland.com/InsuranceWebExtJS/ext/adapter/ext/ext-base-debug.js" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15235" connectionId="1788" origin="HTML" encodingType="ANSI" ordinal="2" startDateTime="2019-02-27T16:49:29.185+05:30" startTime="3826" endTime="4538" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Referer" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9JbnN1cmFuY2VXZWJFeHRKUy9leHQvYWRhcHRlci9leHQvZXh0LWJhc2UtZGVidWcuanMgSFRUUC8xLjENClJlZmVyZXI6IGh0dHA6Ly9kZW1vLmJvcmxhbmQuY29tL0luc3VyYW5jZVdlYkV4dEpTL2FnZW50X2xvb2t1cC5qc2YNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Mi4wLjM2MjYuMTE5IFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQWNjZXB0OiAqLyoNCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkhvc3Q6IGRlbW8uYm9ybGFuZC5jb20NCkNvb2tpZTogSlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>97907</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Length" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OTc5MDc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAzMCBKYW4gMjAxMyAxMjoxNDoxNCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iOTc5MDctMTM1OTU0ODA1NDAwMCI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogOTc5MDcNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KTGFzdC1Nb2RpZmllZDogV2VkLCAzMCBKYW4gMjAxMyAxMjoxNDoxNCBHTVQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpFVGFnOiBXLyI5NzkwNy0xMzU5NTQ4MDU0MDAwIg0KU2VydmVyOiBNaWNyb3NvZnQtSUlTLzcuNQ0KWC1Qb3dlcmVkLUJ5OiBBU1AuTkVUDQpYLUZSQU1FLU9QVElPTlM6IFNBTUVPUklHSU4NCkRhdGU6IFdlZCwgMjcgRmViIDIwMTkgMTE6MTg6NTcgR01UDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>LyohCiAqIEV4dCBKUyBMaWJyYXJ5IDMuNC4wCiAqIENvcHlyaWdodChjKSAyMDA2LTIwMTEgU2VuY2hhIEluYy4KICogbGljZW5zaW5nQHNlbmNoYS5jb20KICogaHR0cDovL3d3dy5zZW5jaGEuY29tL2xpY2Vuc2UKICovCi8vIGZvciBvbGQgYnJvd3NlcnMKd2luZG93LnVuZGVmaW5lZCA9IHdpbmRvdy51bmRlZmluZWQ7CgovKioKICogQGNsYXNzIEV4dAogKiBFeHQgY29yZSB1dGlsaXRpZXMgYW5kIGZ1bmN0aW9ucy4KICogQHNpbmdsZXRvbgogKi8KCkV4dCA9IHsKICAgIC8qKgogICAgICogVGhlIHZlcnNpb24gb2YgdGhlIGZyYW1ld29yawogICAgICogQHR5cGUgU3RyaW5nCiAgICAgKi8KICAgIHZlcnNpb24gOiAnMy40LjAnLAogICAgdmVyc2lvbkRldGFpbCA6IHsKICAgICAgICBtYWpvciA6IDMsCiAgICAgICAgbWlub3IgOiA0LAogICAgICAgIHBhdGNoIDogMAogICAgfQp9OwoKLyoqCiAqIENvcGllcyBhbGwgdGhlIHByb3BlcnRpZXMgb2YgY29uZmlnIHRvIG9iai4KICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgcmVjZWl2ZXIgb2YgdGhlIHByb3BlcnRpZXMKICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgc291cmNlIG9mIHRoZSBwcm9wZXJ0aWVzCiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0cyBBIGRpZmZlcmVudCBvYmplY3QgdGhhdCB3aWxsIGFsc28gYmUgYXBwbGllZCBmb3IgZGVmYXVsdCB2YWx1ZXMKICogQHJldHVybiB7T2JqZWN0fSByZXR1cm5zIG9iagogKiBAbWVtYmVyIEV4dCBhcHBseQogKi8KRXh0LmFwcGx5ID0gZnVuY3Rpb24obywgYywgZGVmYXVsdHMpewogICAgLy8gbm8gInRoaXMiIHJlZmVyZW5jZSBmb3IgZnJpZW5kbHkgb3V0IG9mIHNjb3BlIGNhbGxzCiAgICBpZihkZWZhdWx0cyl7CiAgICAgICAgRXh0LmFwcGx5KG8sIGRlZmF1bHRzKTsKICAgIH0KICAgIGlmKG8gJiYgYyAmJiB0eXBlb2YgYyA9PSAnb2JqZWN0Jyl7CiAgICAgICAgZm9yKHZhciBwIGluIGMpewogICAgICAgICAgICBvW3BdID0gY1twXTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbzsKfTsKCihmdW5jdGlvbigpewogICAgdmFyIGlkU2VlZCA9IDAsCiAgICAgICAgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAogICAgICAgIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLAogICAgICAgIGNoZWNrID0gZnVuY3Rpb24ocil7CiAgICAgICAgICAgIHJldHVybiByLnRlc3QodWEpOwogICAgICAgIH0sCiAgICAgICAgRE9DID0gZG9jdW1lbnQsCiAgICAgICAgZG9jTW9kZSA9IERPQy5kb2N1bWVudE1vZGUsCiAgICAgICAgaXNTdHJpY3QgPSBET0MuY29tcGF0TW9kZSA9PSAiQ1NTMUNvbXBhdCIsCiAgICAgICAgaXNPcGVyYSA9IGNoZWNrKC9vcGVyYS8pLAogICAgICAgIGlzQ2hyb21lID0gY2hlY2soL1xiY2hyb21lXGIvKSwKICAgICAgICBpc1dlYktpdCA9IGNoZWNrKC93ZWJraXQvKSwKICAgICAgICBpc1NhZmFyaSA9ICFpc0Nocm9tZSAmJiBjaGVjaygvc2FmYXJpLyksCiAgICAgICAgaXNTYWZhcmkyID0gaXNTYWZhcmkgJiYgY2hlY2soL2FwcGxld2Via2l0XC80LyksIC8vIHVuaXF1ZSB0byBTYWZhcmkgMgogICAgICAgIGlzU2FmYXJpMyA9IGlzU2FmYXJpICYmIGNoZWNrKC92ZXJzaW9uXC8zLyksCiAgICAgICAgaXNTYWZhcmk0ID0gaXNTYWZhcmkgJiYgY2hlY2soL3ZlcnNpb25cLzQvKSwKICAgICAgICBpc0lFID0gIWlzT3BlcmEgJiYgY2hlY2soL21zaWUvKSwKICAgICAgICBpc0lFNyA9IGlzSUUgJiYgKGNoZWNrKC9tc2llIDcvKSB8fCBkb2NNb2RlID09IDcpLAogICAgICAgIGlzSUU4ID0gaXNJRSAmJiAoY2hlY2soL21zaWUgOC8pICYmIGRvY01vZGUgIT0gNyksCiAgICAgICAgaXNJRTkgPSBpc0lFICYmIGNoZWNrKC9tc2llIDkvKSwKICAgICAgICBpc0lFNiA9IGlzSUUgJiYgIWlzSUU3ICYmICFpc0lFOCAmJiAhaXNJRTksCiAgICAgICAgaXNHZWNrbyA9ICFpc1dlYktpdCAmJiBjaGVjaygvZ2Vja28vKSwKICAgICAgICBpc0dlY2tvMiA9IGlzR2Vja28gJiYgY2hlY2soL3J2OjFcLjgvKSwKICAgICAgICBpc0dlY2tvMyA9IGlzR2Vja28gJiYgY2hlY2soL3J2OjFcLjkvKSwKICAgICAgICBpc0JvcmRlckJveCA9IGlzSUUgJiYgIWlzU3RyaWN0LAogICAgICAgIGlzV2luZG93cyA9IGNoZWNrKC93aW5kb3dzfHdpbjMyLyksCiAgICAgICAgaXNNYWMgPSBjaGVjaygvbWFjaW50b3NofG1hYyBvcyB4LyksCiAgICAgICAgaXNBaXIgPSBjaGVjaygvYWRvYmVhaXIvKSwKICAgICAgICBpc0xpbnV4ID0gY2hlY2soL2xpbnV4LyksCiAgICAgICAgaXNTZWN1cmUgPSAvXmh0dHBzL2kudGVzdCh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpOwoKICAgIC8vIHJlbW92ZSBjc3MgaW1hZ2UgZmxpY2tlcgogICAgaWYoaXNJRTYpewogICAgICAgIHRyeXsKICAgICAgICAgICAgRE9DLmV4ZWNDb21tYW5kKCJCYWNrZ3JvdW5kSW1hZ2VDYWNoZSIsIGZhbHNlLCB0cnVlKTsKICAgICAgICB9Y2F0Y2goZSl7fQogICAgfQoKICAgIEV4dC5hcHBseShFeHQsIHsKICAgICAgICAvKioKICAgICAgICAgKiBVUkwgdG8gYSBibGFuayBmaWxlIHVzZWQgYnkgRXh0IHdoZW4gaW4gc2VjdXJlIG1vZGUgZm9yIGlmcmFtZSBzcmMgYW5kIG9uUmVhZHkgc3JjIHRvIHByZXZlbnQKICAgICAgICAgKiB0aGUgSUUgaW5zZWN1cmUgY29udGVudCB3YXJuaW5nICg8dHQ+J2Fib3V0OmJsYW5rJzwvdHQ+LCBleGNlcHQgZm9yIElFIGluIHNlY3VyZSBtb2RlLCB3aGljaCBpcyA8dHQ+J2phdmFzY3JpcHQ6IiInPC90dD4pLgogICAgICAgICAqIEB0eXBlIFN0cmluZwogICAgICAgICAqLwogICAgICAgIFNTTF9TRUNVUkVfVVJMIDogaXNTZWN1cmUgJiYgaXNJRSA/ICdqYXZhc2NyaXB0OiIiJyA6ICdhYm91dDpibGFuaycsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgYnJvd3NlciBpcyBpbiBzdHJpY3QgKHN0YW5kYXJkcy1jb21wbGlhbnQpIG1vZGUsIGFzIG9wcG9zZWQgdG8gcXVpcmtzIG1vZGUKICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNTdHJpY3QgOiBpc1N0cmljdCwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBwYWdlIGlzIHJ1bm5pbmcgb3ZlciBTU0wKICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNTZWN1cmUgOiBpc1NlY3VyZSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIHdoZW4gdGhlIGRvY3VtZW50IGlzIGZ1bGx5IGluaXRpYWxpemVkIGFuZCByZWFkeSBmb3IgYWN0aW9uCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzUmVhZHkgOiBmYWxzZSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUge0BsaW5rIEV4dC5GeH0gQ2xhc3MgaXMgYXZhaWxhYmxlCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqIEBwcm9wZXJ0eSBlbmFibGVGeAogICAgICAgICAqLwoKICAgICAgICAvKioKICAgICAgICAgKiBISUdITFkgRVhQRVJJTUVOVEFMCiAgICAgICAgICogVHJ1ZSB0byBmb3JjZSBjc3MgYmFzZWQgYm9yZGVyLWJveCBtb2RlbCBvdmVycmlkZSBhbmQgdHVybmluZyBvZmYgamF2YXNjcmlwdCBiYXNlZCBhZGp1c3RtZW50cy4gVGhpcyBpcyBhCiAgICAgICAgICogcnVudGltZSBjb25maWd1cmF0aW9uIGFuZCBtdXN0IGJlIHNldCBiZWZvcmUgb25SZWFkeS4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgZW5hYmxlRm9yY2VkQm94TW9kZWwgOiBmYWxzZSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHVuY2FjaGUgb3JwaGFuZWQgRXh0LkVsZW1lbnRzIHBlcmlvZGljYWxseSAoZGVmYXVsdHMgdG8gdHJ1ZSkKICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgZW5hYmxlR2FyYmFnZUNvbGxlY3RvciA6IHRydWUsCgogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgdG8gYXV0b21hdGljYWxseSBwdXJnZSBldmVudCBsaXN0ZW5lcnMgZHVyaW5nIGdhcmJhZ2VDb2xsZWN0aW9uIChkZWZhdWx0cyB0byBmYWxzZSkuCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGVuYWJsZUxpc3RlbmVyQ29sbGVjdGlvbiA6IGZhbHNlLAoKICAgICAgICAvKioKICAgICAgICAgKiBFWFBFUklNRU5UQUwgLSBUcnVlIHRvIGNhc2NhZGUgbGlzdGVuZXIgcmVtb3ZhbCB0byBjaGlsZCBlbGVtZW50cyB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZC4KICAgICAgICAgKiBDdXJyZW50bHkgbm90IG9wdGltaXplZCBmb3IgcGVyZm9ybWFuY2UuCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGVuYWJsZU5lc3RlZExpc3RlbmVyUmVtb3ZhbCA6IGZhbHNlLAoKICAgICAgICAvKioKICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0byB1c2UgbmF0aXZlIGJyb3dzZXIgcGFyc2luZyBmb3IgSlNPTiBtZXRob2RzLgogICAgICAgICAqIFRoaXMgb3B0aW9uIGlzIGlnbm9yZWQgaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBuYXRpdmUgSlNPTiBtZXRob2RzLgogICAgICAgICAqIDxiPk5vdGU6IE5hdGl2ZSBKU09OIG1ldGhvZHMgd2lsbCBub3Qgd29yayB3aXRoIG9iamVjdHMgdGhhdCBoYXZlIGZ1bmN0aW9ucy4KICAgICAgICAgKiBBbHNvLCBwcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHF1b3RlZCwgb3RoZXJ3aXNlIHRoZSBkYXRhIHdpbGwgbm90IHBhcnNlLjwvYj4gKERlZmF1bHRzIHRvIGZhbHNlKQogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBVU0VfTkFUSVZFX0pTT04gOiBmYWxzZSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQ29waWVzIGFsbCB0aGUgcHJvcGVydGllcyBvZiBjb25maWcgdG8gb2JqIGlmIHRoZXkgZG9uJ3QgYWxyZWFkeSBleGlzdC4KICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSByZWNlaXZlciBvZiB0aGUgcHJvcGVydGllcwogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIHNvdXJjZSBvZiB0aGUgcHJvcGVydGllcwogICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gcmV0dXJucyBvYmoKICAgICAgICAgKi8KICAgICAgICBhcHBseUlmIDogZnVuY3Rpb24obywgYyl7CiAgICAgICAgICAgIGlmKG8pewogICAgICAgICAgICAgICAgZm9yKHZhciBwIGluIGMpewogICAgICAgICAgICAgICAgICAgIGlmKCFFeHQuaXNEZWZpbmVkKG9bcF0pKXsKICAgICAgICAgICAgICAgICAgICAgICAgb1twXSA9IGNbcF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEdlbmVyYXRlcyB1bmlxdWUgaWRzLiBJZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBhbiBpZCwgaXQgaXMgdW5jaGFuZ2VkCiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gZWwgKG9wdGlvbmFsKSBUaGUgZWxlbWVudCB0byBnZW5lcmF0ZSBhbiBpZCBmb3IKICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IChvcHRpb25hbCkgSWQgcHJlZml4IChkZWZhdWx0cyAiZXh0LWdlbiIpCiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZ2VuZXJhdGVkIElkLgogICAgICAgICAqLwogICAgICAgIGlkIDogZnVuY3Rpb24oZWwsIHByZWZpeCl7CiAgICAgICAgICAgIGVsID0gRXh0LmdldERvbShlbCwgdHJ1ZSkgfHwge307CiAgICAgICAgICAgIGlmICghZWwuaWQpIHsKICAgICAgICAgICAgICAgIGVsLmlkID0gKHByZWZpeCB8fCAiZXh0LWdlbiIpICsgKCsraWRTZWVkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZWwuaWQ7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogPHA+RXh0ZW5kcyBvbmUgY2xhc3MgdG8gY3JlYXRlIGEgc3ViY2xhc3MgYW5kIG9wdGlvbmFsbHkgb3ZlcnJpZGVzIG1lbWJlcnMgd2l0aCB0aGUgcGFzc2VkIGxpdGVyYWwuIFRoaXMgbWV0aG9kCiAgICAgICAgICogYWxzbyBhZGRzIHRoZSBmdW5jdGlvbiAib3ZlcnJpZGUoKSIgdG8gdGhlIHN1YmNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgbWVtYmVycyBvZiB0aGUgY2xhc3MuPC9wPgogICAgICAgICAqIEZvciBleGFtcGxlLCB0byBjcmVhdGUgYSBzdWJjbGFzcyBvZiBFeHQgR3JpZFBhbmVsOgogICAgICAgICAqIDxwcmU+PGNvZGU+Ck15R3JpZFBhbmVsID0gRXh0LmV4dGVuZChFeHQuZ3JpZC5HcmlkUGFuZWwsIHsKICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbihjb25maWcpIHsKCi8vICAgICAgQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgR3JpZC4KICAgICAgICB2YXIgc3RvcmUgPSBuZXcgRXh0LmRhdGEuU3RvcmUoey4uLn0pOwogICAgICAgIHZhciBjb2xNb2RlbCA9IG5ldyBFeHQuZ3JpZC5Db2x1bW5Nb2RlbCh7Li4ufSk7CgovLyAgICAgIENyZWF0ZSBhIG5ldyBjb25maWcgb2JqZWN0IGNvbnRhaW5pbmcgb3VyIGNvbXB1dGVkIHByb3BlcnRpZXMKLy8gICAgICAqcGx1cyogd2hhdGV2ZXIgd2FzIGluIHRoZSBjb25maWcgcGFyYW1ldGVyLgogICAgICAgIGNvbmZpZyA9IEV4dC5hcHBseSh7CiAgICAgICAgICAgIHN0b3JlOiBzdG9yZSwKICAgICAgICAgICAgY29sTW9kZWw6IGNvbE1vZGVsCiAgICAgICAgfSwgY29uZmlnKTsKCiAgICAgICAgTXlHcmlkUGFuZWwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGNvbmZpZyk7CgovLyAgICAgIFlvdXIgcG9zdHByb2Nlc3NpbmcgaGVyZQogICAgfSwKCiAgICB5b3VyTWV0aG9kOiBmdW5jdGlvbigpIHsKICAgICAgICAvLyBldGMuCiAgICB9Cn0pOwo8L2NvZGU+PC9wcmU+CiAgICAgICAgICoKICAgICAgICAgKiA8cD5UaGlzIGZ1bmN0aW9uIGFsc28gc3VwcG9ydHMgYSAzLWFyZ3VtZW50IGNhbGwgaW4gd2hpY2ggdGhlIHN1YmNsYXNzJ3MgY29uc3RydWN0b3IgaXMKICAgICAgICAgKiBwYXNzZWQgYXMgYW4gYXJndW1lbnQuIEluIHRoaXMgZm9ybSwgdGhlIHBhcmFtZXRlcnMgYXJlIGFzIGZvbGxvd3M6PC9wPgogICAgICAgICAqIDxkaXYgY2xhc3M9Im1kZXRhaWwtcGFyYW1zIj48dWw+CiAgICAgICAgICogPGxpPjxjb2RlPnN1YmNsYXNzPC9jb2RlPiA6IEZ1bmN0aW9uIDxkaXYgY2xhc3M9InN1Yi1kZXNjIj5UaGUgc3ViY2xhc3MgY29uc3RydWN0b3IuPC9kaXY+PC9saT4KICAgICAgICAgKiA8bGk+PGNvZGU+c3VwZXJjbGFzczwvY29kZT4gOiBGdW5jdGlvbiA8ZGl2IGNsYXNzPSJzdWItZGVzYyI+VGhlIGNvbnN0cnVjdG9yIG9mIGNsYXNzIGJlaW5nIGV4dGVuZGVkPC9kaXY+PC9saT4KICAgICAgICAgKiA8bGk+PGNvZGU+b3ZlcnJpZGVzPC9jb2RlPiA6IE9iamVjdCA8ZGl2IGNsYXNzPSJzdWItZGVzYyI+QSBsaXRlcmFsIHdpdGggbWVtYmVycyB3aGljaCBhcmUgY29waWVkIGludG8gdGhlIHN1YmNsYXNzJ3MKICAgICAgICAgKiBwcm90b3R5cGUsIGFuZCBhcmUgdGhlcmVmb3JlIHNoYXJlZCBhbW9uZyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBuZXcgY2xhc3MuPC9kaXY+PC9saT4KICAgICAgICAgKiA8L3VsPjwvZGl2PgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJjbGFzcyBUaGUgY29uc3RydWN0b3Igb2YgY2xhc3MgYmVpbmcgZXh0ZW5kZWQuCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyA8cD5BIGxpdGVyYWwgd2l0aCBtZW1iZXJzIHdoaWNoIGFyZSBjb3BpZWQgaW50byB0aGUgc3ViY2xhc3MncwogICAgICAgICAqIHByb3RvdHlwZSwgYW5kIGFyZSB0aGVyZWZvcmUgc2hhcmVkIGJldHdlZW4gYWxsIGluc3RhbmNlcyBvZiB0aGUgbmV3IGNsYXNzLjwvcD4KICAgICAgICAgKiA8cD5UaGlzIG1heSBjb250YWluIGEgc3BlY2lhbCBtZW1iZXIgbmFtZWQgPHR0PjxiPmNvbnN0cnVjdG9yPC9iPjwvdHQ+LiBUaGlzIGlzIHVzZWQKICAgICAgICAgKiB0byBkZWZpbmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBuZXcgY2xhc3MsIGFuZCBpcyByZXR1cm5lZC4gSWYgdGhpcyBwcm9wZXJ0eSBpcwogICAgICAgICAqIDxpPm5vdDwvaT4gc3BlY2lmaWVkLCBhIGNvbnN0cnVjdG9yIGlzIGdlbmVyYXRlZCBhbmQgcmV0dXJuZWQgd2hpY2gganVzdCBjYWxscyB0aGUKICAgICAgICAgKiBzdXBlcmNsYXNzJ3MgY29uc3RydWN0b3IgcGFzc2luZyBvbiBpdHMgcGFyYW1ldGVycy48L3A+CiAgICAgICAgICogPHA+PGI+SXQgaXMgZXNzZW50aWFsIHRoYXQgeW91IGNhbGwgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgaW4gYW55IHByb3ZpZGVkIGNvbnN0cnVjdG9yLiBTZWUgZXhhbXBsZSBjb2RlLjwvYj48L3A+CiAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzdWJjbGFzcyBjb25zdHJ1Y3RvciBmcm9tIHRoZSA8Y29kZT5vdmVycmlkZXM8L2NvZGU+IHBhcmFtZXRlciwgb3IgYSBnZW5lcmF0ZWQgb25lIGlmIG5vdCBwcm92aWRlZC4KICAgICAgICAgKi8KICAgICAgICBleHRlbmQgOiBmdW5jdGlvbigpewogICAgICAgICAgICAvLyBpbmxpbmUgb3ZlcnJpZGVzCiAgICAgICAgICAgIHZhciBpbyA9IGZ1bmN0aW9uKG8pewogICAgICAgICAgICAgICAgZm9yKHZhciBtIGluIG8pewogICAgICAgICAgICAgICAgICAgIHRoaXNbbV0gPSBvW21dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgb2MgPSBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yOwoKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNiLCBzcCwgb3ZlcnJpZGVzKXsKICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzcCA9PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVzID0gc3A7CiAgICAgICAgICAgICAgICAgICAgc3AgPSBzYjsKICAgICAgICAgICAgICAgICAgICBzYiA9IG92ZXJyaWRlcy5jb25zdHJ1Y3RvciAhPSBvYyA/IG92ZXJyaWRlcy5jb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKCl7c3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpe30sCiAgICAgICAgICAgICAgICAgICAgc2JwLAogICAgICAgICAgICAgICAgICAgIHNwcCA9IHNwLnByb3RvdHlwZTsKCiAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHNwcDsKICAgICAgICAgICAgICAgIHNicCA9IHNiLnByb3RvdHlwZSA9IG5ldyBGKCk7CiAgICAgICAgICAgICAgICBzYnAuY29uc3RydWN0b3I9c2I7CiAgICAgICAgICAgICAgICBzYi5zdXBlcmNsYXNzPXNwcDsKICAgICAgICAgICAgICAgIGlmKHNwcC5jb25zdHJ1Y3RvciA9PSBvYyl7CiAgICAgICAgICAgICAgICAgICAgc3BwLmNvbnN0cnVjdG9yPXNwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2Iub3ZlcnJpZGUgPSBmdW5jdGlvbihvKXsKICAgICAgICAgICAgICAgICAgICBFeHQub3ZlcnJpZGUoc2IsIG8pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHNicC5zdXBlcmNsYXNzID0gc2JwLnN1cHIgPSAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3BwOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzYnAub3ZlcnJpZGUgPSBpbzsKICAgICAgICAgICAgICAgIEV4dC5vdmVycmlkZShzYiwgb3ZlcnJpZGVzKTsKICAgICAgICAgICAgICAgIHNiLmV4dGVuZCA9IGZ1bmN0aW9uKG8pe3JldHVybiBFeHQuZXh0ZW5kKHNiLCBvKTt9OwogICAgICAgICAgICAgICAgcmV0dXJuIHNiOwogICAgICAgICAgICB9OwogICAgICAgIH0oKSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQWRkcyBhIGxpc3Qgb2YgZnVuY3Rpb25zIHRvIHRoZSBwcm90b3R5cGUgb2YgYW4gZXhpc3RpbmcgY2xhc3MsIG92ZXJ3cml0aW5nIGFueSBleGlzdGluZyBtZXRob2RzIHdpdGggdGhlIHNhbWUgbmFtZS4KICAgICAgICAgKiBVc2FnZTo8cHJlPjxjb2RlPgpFeHQub3ZlcnJpZGUoTXlDbGFzcywgewogICAgbmV3TWV0aG9kMTogZnVuY3Rpb24oKXsKICAgICAgICAvLyBldGMuCiAgICB9LAogICAgbmV3TWV0aG9kMjogZnVuY3Rpb24oZm9vKXsKICAgICAgICAvLyBldGMuCiAgICB9Cn0pOwo8L2NvZGU+PC9wcmU+CiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9yaWdjbGFzcyBUaGUgY2xhc3MgdG8gb3ZlcnJpZGUKICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3ZlcnJpZGVzIFRoZSBsaXN0IG9mIGZ1bmN0aW9ucyB0byBhZGQgdG8gb3JpZ0NsYXNzLiAgVGhpcyBzaG91bGQgYmUgc3BlY2lmaWVkIGFzIGFuIG9iamVjdCBsaXRlcmFsCiAgICAgICAgICogY29udGFpbmluZyBvbmUgb3IgbW9yZSBtZXRob2RzLgogICAgICAgICAqIEBtZXRob2Qgb3ZlcnJpZGUKICAgICAgICAgKi8KICAgICAgICBvdmVycmlkZSA6IGZ1bmN0aW9uKG9yaWdjbGFzcywgb3ZlcnJpZGVzKXsKICAgICAgICAgICAgaWYob3ZlcnJpZGVzKXsKICAgICAgICAgICAgICAgIHZhciBwID0gb3JpZ2NsYXNzLnByb3RvdHlwZTsKICAgICAgICAgICAgICAgIEV4dC5hcHBseShwLCBvdmVycmlkZXMpOwogICAgICAgICAgICAgICAgaWYoRXh0LmlzSUUgJiYgb3ZlcnJpZGVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKXsKICAgICAgICAgICAgICAgICAgICBwLnRvU3RyaW5nID0gb3ZlcnJpZGVzLnRvU3RyaW5nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQ3JlYXRlcyBuYW1lc3BhY2VzIHRvIGJlIHVzZWQgZm9yIHNjb3BpbmcgdmFyaWFibGVzIGFuZCBjbGFzc2VzIHNvIHRoYXQgdGhleSBhcmUgbm90IGdsb2JhbC4KICAgICAgICAgKiBTcGVjaWZ5aW5nIHRoZSBsYXN0IG5vZGUgb2YgYSBuYW1lc3BhY2UgaW1wbGljaXRseSBjcmVhdGVzIGFsbCBvdGhlciBub2Rlcy4gVXNhZ2U6CiAgICAgICAgICogPHByZT48Y29kZT4KRXh0Lm5hbWVzcGFjZSgnQ29tcGFueScsICdDb21wYW55LmRhdGEnKTsKRXh0Lm5hbWVzcGFjZSgnQ29tcGFueS5kYXRhJyk7IC8vIGVxdWl2YWxlbnQgYW5kIHByZWZlcmFibGUgdG8gYWJvdmUgc3ludGF4CkNvbXBhbnkuV2lkZ2V0ID0gZnVuY3Rpb24oKSB7IC4uLiB9CkNvbXBhbnkuZGF0YS5DdXN0b21TdG9yZSA9IGZ1bmN0aW9uKGNvbmZpZykgeyAuLi4gfQo8L2NvZGU+PC9wcmU+CiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZTEKICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlMgogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldGMKICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuYW1lc3BhY2Ugb2JqZWN0LiAoSWYgbXVsdGlwbGUgYXJndW1lbnRzIGFyZSBwYXNzZWQsIHRoaXMgd2lsbCBiZSB0aGUgbGFzdCBuYW1lc3BhY2UgY3JlYXRlZCkKICAgICAgICAgKiBAbWV0aG9kIG5hbWVzcGFjZQogICAgICAgICAqLwogICAgICAgIG5hbWVzcGFjZSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBsZW4xID0gYXJndW1lbnRzLmxlbmd0aCwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgbGVuMiwKICAgICAgICAgICAgICAgIGosCiAgICAgICAgICAgICAgICBtYWluLAogICAgICAgICAgICAgICAgbnMsCiAgICAgICAgICAgICAgICBzdWIsCiAgICAgICAgICAgICAgICBjdXJyZW50OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGZvcig7IGkgPCBsZW4xOyArK2kpIHsKICAgICAgICAgICAgICAgIG1haW4gPSBhcmd1bWVudHNbaV07CiAgICAgICAgICAgICAgICBucyA9IGFyZ3VtZW50c1tpXS5zcGxpdCgnLicpOwogICAgICAgICAgICAgICAgY3VycmVudCA9IHdpbmRvd1tuc1swXV07CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHdpbmRvd1tuc1swXV0gPSB7fTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN1YiA9IG5zLnNsaWNlKDEpOwogICAgICAgICAgICAgICAgbGVuMiA9IHN1Yi5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IoaiA9IDA7IGogPCBsZW4yOyArK2opIHsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudFtzdWJbal1dID0gY3VycmVudFtzdWJbal1dIHx8IHt9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjdXJyZW50OwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFRha2VzIGFuIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYW4gZW5jb2RlZCBVUkwuIGUuZy4gRXh0LnVybEVuY29kZSh7Zm9vOiAxLCBiYXI6IDJ9KTsgd291bGQgcmV0dXJuICJmb289MSZiYXI9MiIuICBPcHRpb25hbGx5LCBwcm9wZXJ0eSB2YWx1ZXMgY2FuIGJlIGFycmF5cywgaW5zdGVhZCBvZiBrZXlzIGFuZCB0aGUgcmVzdWx0aW5nIHN0cmluZyB0aGF0J3MgcmV0dXJuZWQgd2lsbCBjb250YWluIGEgbmFtZS92YWx1ZSBwYWlyIGZvciBlYWNoIGFycmF5IHZhbHVlLgogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHByZSAob3B0aW9uYWwpIEEgcHJlZml4IHRvIGFkZCB0byB0aGUgdXJsIGVuY29kZWQgc3RyaW5nCiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIHVybEVuY29kZSA6IGZ1bmN0aW9uKG8sIHByZSl7CiAgICAgICAgICAgIHZhciBlbXB0eSwKICAgICAgICAgICAgICAgIGJ1ZiA9IFtdLAogICAgICAgICAgICAgICAgZSA9IGVuY29kZVVSSUNvbXBvbmVudDsKCiAgICAgICAgICAgIEV4dC5pdGVyYXRlKG8sIGZ1bmN0aW9uKGtleSwgaXRlbSl7CiAgICAgICAgICAgICAgICBlbXB0eSA9IEV4dC5pc0VtcHR5KGl0ZW0pOwogICAgICAgICAgICAgICAgRXh0LmVhY2goZW1wdHkgPyBrZXkgOiBpdGVtLCBmdW5jdGlvbih2YWwpewogICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKCcmJywgZShrZXkpLCAnPScsICghRXh0LmlzRW1wdHkodmFsKSAmJiAodmFsICE9IGtleSB8fCAhZW1wdHkpKSA/IChFeHQuaXNEYXRlKHZhbCkgPyBFeHQuZW5jb2RlKHZhbCkucmVwbGFjZSgvIi9nLCAnJykgOiBlKHZhbCkpIDogJycpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZighcHJlKXsKICAgICAgICAgICAgICAgIGJ1Zi5zaGlmdCgpOwogICAgICAgICAgICAgICAgcHJlID0gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHByZSArIGJ1Zi5qb2luKCcnKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBUYWtlcyBhbiBlbmNvZGVkIFVSTCBhbmQgYW5kIGNvbnZlcnRzIGl0IHRvIGFuIG9iamVjdC4gRXhhbXBsZTogPHByZT48Y29kZT4KRXh0LnVybERlY29kZSgiZm9vPTEmYmFyPTIiKTsgLy8gcmV0dXJucyB7Zm9vOiAiMSIsIGJhcjogIjIifQpFeHQudXJsRGVjb2RlKCJmb289MSZiYXI9MiZiYXI9MyZiYXI9NCIsIGZhbHNlKTsgLy8gcmV0dXJucyB7Zm9vOiAiMSIsIGJhcjogWyIyIiwgIjMiLCAiNCJdfQo8L2NvZGU+PC9wcmU+CiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZwogICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3ZlcndyaXRlIChvcHRpb25hbCkgSXRlbXMgb2YgdGhlIHNhbWUgbmFtZSB3aWxsIG92ZXJ3cml0ZSBwcmV2aW91cyB2YWx1ZXMgaW5zdGVhZCBvZiBjcmVhdGluZyBhbiBhbiBhcnJheSAoRGVmYXVsdHMgdG8gZmFsc2UpLgogICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQSBsaXRlcmFsIHdpdGggbWVtYmVycwogICAgICAgICAqLwogICAgICAgIHVybERlY29kZSA6IGZ1bmN0aW9uKHN0cmluZywgb3ZlcndyaXRlKXsKICAgICAgICAgICAgaWYoRXh0LmlzRW1wdHkoc3RyaW5nKSl7CiAgICAgICAgICAgICAgICByZXR1cm4ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG9iaiA9IHt9LAogICAgICAgICAgICAgICAgcGFpcnMgPSBzdHJpbmcuc3BsaXQoJyYnKSwKICAgICAgICAgICAgICAgIGQgPSBkZWNvZGVVUklDb21wb25lbnQsCiAgICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgICAgdmFsdWU7CiAgICAgICAgICAgIEV4dC5lYWNoKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7CiAgICAgICAgICAgICAgICBwYWlyID0gcGFpci5zcGxpdCgnPScpOwogICAgICAgICAgICAgICAgbmFtZSA9IGQocGFpclswXSk7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IGQocGFpclsxXSk7CiAgICAgICAgICAgICAgICBvYmpbbmFtZV0gPSBvdmVyd3JpdGUgfHwgIW9ialtuYW1lXSA/IHZhbHVlIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChvYmpbbmFtZV0pLmNvbmNhdCh2YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEFwcGVuZHMgY29udGVudCB0byB0aGUgcXVlcnkgc3RyaW5nIG9mIGEgVVJMLCBoYW5kbGluZyBsb2dpYyBmb3Igd2hldGhlciB0byBwbGFjZQogICAgICAgICAqIGEgcXVlc3Rpb24gbWFyayBvciBhbXBlcnNhbmQuCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGFwcGVuZCB0by4KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcyBUaGUgY29udGVudCB0byBhcHBlbmQgdG8gdGhlIFVSTC4KICAgICAgICAgKiBAcmV0dXJuIChTdHJpbmcpIFRoZSByZXN1bHRpbmcgVVJMCiAgICAgICAgICovCiAgICAgICAgdXJsQXBwZW5kIDogZnVuY3Rpb24odXJsLCBzKXsKICAgICAgICAgICAgaWYoIUV4dC5pc0VtcHR5KHMpKXsKICAgICAgICAgICAgICAgIHJldHVybiB1cmwgKyAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIENvbnZlcnRzIGFueSBpdGVyYWJsZSAobnVtZXJpYyBpbmRpY2VzIGFuZCBhIGxlbmd0aCBwcm9wZXJ0eSkgaW50byBhIHRydWUgYXJyYXkKICAgICAgICAgKiBEb24ndCB1c2UgdGhpcyBvbiBzdHJpbmdzLiBJRSBkb2Vzbid0IHN1cHBvcnQgImFiYyJbMF0gd2hpY2ggdGhpcyBpbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uLgogICAgICAgICAqIEZvciBzdHJpbmdzLCB1c2UgdGhpcyBpbnN0ZWFkOiAiYWJjIi5tYXRjaCgvLi9nKSA9PiBbYSxiLGNdOwogICAgICAgICAqIEBwYXJhbSB7SXRlcmFibGV9IHRoZSBpdGVyYWJsZSBvYmplY3QgdG8gYmUgdHVybmVkIGludG8gYSB0cnVlIEFycmF5LgogICAgICAgICAqIEByZXR1cm4gKEFycmF5KSBhcnJheQogICAgICAgICAqLwogICAgICAgICB0b0FycmF5IDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgIHJldHVybiBpc0lFID8KICAgICAgICAgICAgICAgICBmdW5jdGlvbihhLCBpLCBqLCByZXMpewogICAgICAgICAgICAgICAgICAgICByZXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciB4ID0gMCwgbGVuID0gYS5sZW5ndGg7IHggPCBsZW47IHgrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYVt4XSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zbGljZShpIHx8IDAsIGogfHwgcmVzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgfSA6CiAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYSwgaSwgail7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhLCBpIHx8IDAsIGogfHwgYS5sZW5ndGgpOwogICAgICAgICAgICAgICAgIH07CiAgICAgICAgIH0oKSwKCiAgICAgICAgaXNJdGVyYWJsZSA6IGZ1bmN0aW9uKHYpewogICAgICAgICAgICAvL2NoZWNrIGZvciBhcnJheSBvciBhcmd1bWVudHMKICAgICAgICAgICAgaWYoRXh0LmlzQXJyYXkodikgfHwgdi5jYWxsZWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jaGVjayBmb3Igbm9kZSBsaXN0IHR5cGUKICAgICAgICAgICAgaWYoL05vZGVMaXN0fEhUTUxDb2xsZWN0aW9uLy50ZXN0KHRvU3RyaW5nLmNhbGwodikpKXsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vTm9kZUxpc3QgaGFzIGFuIGl0ZW0gYW5kIGxlbmd0aCBwcm9wZXJ0eQogICAgICAgICAgICAvL0lYTUxET01Ob2RlTGlzdCBoYXMgbmV4dE5vZGUgbWV0aG9kLCBuZWVkcyB0byBiZSBjaGVja2VkIGZpcnN0LgogICAgICAgICAgICByZXR1cm4gKCh0eXBlb2Ygdi5uZXh0Tm9kZSAhPSAndW5kZWZpbmVkJyB8fCB2Lml0ZW0pICYmIEV4dC5pc051bWJlcih2Lmxlbmd0aCkpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEl0ZXJhdGVzIGFuIGFycmF5IGNhbGxpbmcgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uLgogICAgICAgICAqIEBwYXJhbSB7QXJyYXkvTm9kZUxpc3QvTWl4ZWR9IGFycmF5IFRoZSBhcnJheSB0byBiZSBpdGVyYXRlZC4gSWYgdGhpcwogICAgICAgICAqIGFyZ3VtZW50IGlzIG5vdCByZWFsbHkgYW4gYXJyYXksIHRoZSBzdXBwbGllZCBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZS4KICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggZWFjaCBpdGVtLiBJZiB0aGUKICAgICAgICAgKiBzdXBwbGllZCBmdW5jdGlvbiByZXR1cm5zIGZhbHNlLCBpdGVyYXRpb24gc3RvcHMgYW5kIHRoaXMgbWV0aG9kIHJldHVybnMKICAgICAgICAgKiB0aGUgY3VycmVudCA8Y29kZT5pbmRleDwvY29kZT4uIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGgKICAgICAgICAgKiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czoKICAgICAgICAgKiA8ZGl2IGNsYXNzPSJtZGV0YWlsLXBhcmFtcyI+PHVsPgogICAgICAgICAqIDxsaT48Y29kZT5pdGVtPC9jb2RlPiA6IDxpPk1peGVkPC9pPgogICAgICAgICAqIDxkaXYgY2xhc3M9InN1Yi1kZXNjIj5UaGUgaXRlbSBhdCB0aGUgY3VycmVudCA8Y29kZT5pbmRleDwvY29kZT4KICAgICAgICAgKiBpbiB0aGUgcGFzc2VkIDxjb2RlPmFycmF5PC9jb2RlPjwvZGl2PjwvbGk+CiAgICAgICAgICogPGxpPjxjb2RlPmluZGV4PC9jb2RlPiA6IDxpPk51bWJlcjwvaT4KICAgICAgICAgKiA8ZGl2IGNsYXNzPSJzdWItZGVzYyI+VGhlIGN1cnJlbnQgaW5kZXggd2l0aGluIHRoZSBhcnJheTwvZGl2PjwvbGk+CiAgICAgICAgICogPGxpPjxjb2RlPmFsbEl0ZW1zPC9jb2RlPiA6IDxpPkFycmF5PC9pPgogICAgICAgICAqIDxkaXYgY2xhc3M9InN1Yi1kZXNjIj5UaGUgPGNvZGU+YXJyYXk8L2NvZGU+IHBhc3NlZCBhcyB0aGUgZmlyc3QKICAgICAgICAgKiBhcmd1bWVudCB0byA8Y29kZT5FeHQuZWFjaDwvY29kZT4uPC9kaXY+PC9saT4KICAgICAgICAgKiA8L3VsPjwvZGl2PgogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBUaGUgc2NvcGUgKDxjb2RlPnRoaXM8L2NvZGU+IHJlZmVyZW5jZSkgaW4gd2hpY2ggdGhlIHNwZWNpZmllZCBmdW5jdGlvbiBpcyBleGVjdXRlZC4KICAgICAgICAgKiBEZWZhdWx0cyB0byB0aGUgPGNvZGU+aXRlbTwvY29kZT4gYXQgdGhlIGN1cnJlbnQgPGNvZGU+aW5kZXg8L2NvZGU+CiAgICAgICAgICogd2l0aGluIHRoZSBwYXNzZWQgPGNvZGU+YXJyYXk8L2NvZGU+LgogICAgICAgICAqIEByZXR1cm4gU2VlIGRlc2NyaXB0aW9uIGZvciB0aGUgZm4gcGFyYW1ldGVyLgogICAgICAgICAqLwogICAgICAgIGVhY2ggOiBmdW5jdGlvbihhcnJheSwgZm4sIHNjb3BlKXsKICAgICAgICAgICAgaWYoRXh0LmlzRW1wdHkoYXJyYXksIHRydWUpKXsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZighRXh0LmlzSXRlcmFibGUoYXJyYXkpIHx8IEV4dC5pc1ByaW1pdGl2ZShhcnJheSkpewogICAgICAgICAgICAgICAgYXJyYXkgPSBbYXJyYXldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKXsKICAgICAgICAgICAgICAgIGlmKGZuLmNhbGwoc2NvcGUgfHwgYXJyYXlbaV0sIGFycmF5W2ldLCBpLCBhcnJheSkgPT09IGZhbHNlKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBJdGVyYXRlcyBlaXRoZXIgdGhlIGVsZW1lbnRzIGluIGFuIGFycmF5LCBvciBlYWNoIG9mIHRoZSBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC4KICAgICAgICAgKiA8Yj5Ob3RlPC9iPjogSWYgeW91IGFyZSBvbmx5IGl0ZXJhdGluZyBhcnJheXMsIGl0IGlzIGJldHRlciB0byBjYWxsIHtAbGluayAjZWFjaH0uCiAgICAgICAgICogQHBhcmFtIHtPYmplY3QvQXJyYXl9IG9iamVjdCBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGl0ZXJhdGVkCiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBpdGVyYXRpb24uCiAgICAgICAgICogVGhlIGl0ZXJhdGlvbiB3aWxsIHN0b3AgaWYgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UsIG9yCiAgICAgICAgICogYWxsIGFycmF5IGVsZW1lbnRzIC8gb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBiZWVuIGNvdmVyZWQuIFRoZSBzaWduYXR1cmUKICAgICAgICAgKiB2YXJpZXMgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIG9iamVjdCBiZWluZyBpbnRlcmF0ZWQ6CiAgICAgICAgICogPGRpdiBjbGFzcz0ibWRldGFpbC1wYXJhbXMiPjx1bD4KICAgICAgICAgKiA8bGk+QXJyYXlzIDogPHR0PihPYmplY3QgaXRlbSwgTnVtYmVyIGluZGV4LCBBcnJheSBhbGxJdGVtcyk8L3R0PgogICAgICAgICAqIDxkaXYgY2xhc3M9InN1Yi1kZXNjIj4KICAgICAgICAgKiBXaGVuIGl0ZXJhdGluZyBhbiBhcnJheSwgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGVhY2ggaXRlbS48L2Rpdj48L2xpPgogICAgICAgICAqIDxsaT5PYmplY3RzIDogPHR0PihTdHJpbmcga2V5LCBPYmplY3QgdmFsdWUsIE9iamVjdCk8L3R0PgogICAgICAgICAqIDxkaXYgY2xhc3M9InN1Yi1kZXNjIj4KICAgICAgICAgKiBXaGVuIGl0ZXJhdGluZyBhbiBvYmplY3QsIHRoZSBzdXBwbGllZCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBlYWNoIGtleS12YWx1ZSBwYWlyIGluCiAgICAgICAgICogdGhlIG9iamVjdCwgYW5kIHRoZSBpdGVyYXRlZCBvYmplY3Q8L2Rpdj48L2xpPgogICAgICAgICAqIDwvdWw+PC9kaXY+CiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIFRoZSBzY29wZSAoPGNvZGU+dGhpczwvY29kZT4gcmVmZXJlbmNlKSBpbiB3aGljaCB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLiBEZWZhdWx0cyB0bwogICAgICAgICAqIHRoZSA8Y29kZT5vYmplY3Q8L2NvZGU+IGJlaW5nIGl0ZXJhdGVkLgogICAgICAgICAqLwogICAgICAgIGl0ZXJhdGUgOiBmdW5jdGlvbihvYmosIGZuLCBzY29wZSl7CiAgICAgICAgICAgIGlmKEV4dC5pc0VtcHR5KG9iaikpewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKEV4dC5pc0l0ZXJhYmxlKG9iaikpewogICAgICAgICAgICAgICAgRXh0LmVhY2gob2JqLCBmbiwgc2NvcGUpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2Ygb2JqID09ICdvYmplY3QnKXsKICAgICAgICAgICAgICAgIGZvcih2YXIgcHJvcCBpbiBvYmopewogICAgICAgICAgICAgICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZuLmNhbGwoc2NvcGUgfHwgb2JqLCBwcm9wLCBvYmpbcHJvcF0sIG9iaikgPT09IGZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm4gdGhlIGRvbSBub2RlIGZvciB0aGUgcGFzc2VkIFN0cmluZyAoaWQpLCBkb20gbm9kZSwgb3IgRXh0LkVsZW1lbnQuCiAgICAgICAgICogT3B0aW9uYWwgJ3N0cmljdCcgZmxhZyBpcyBuZWVkZWQgZm9yIElFIHNpbmNlIGl0IGNhbiByZXR1cm4gJ25hbWUnIGFuZAogICAgICAgICAqICdpZCcgZWxlbWVudHMgYnkgdXNpbmcgZ2V0RWxlbWVudEJ5SWQuCiAgICAgICAgICogSGVyZSBhcmUgc29tZSBleGFtcGxlczoKICAgICAgICAgKiA8cHJlPjxjb2RlPgovLyBnZXRzIGRvbSBub2RlIGJhc2VkIG9uIGlkCnZhciBlbERvbSA9IEV4dC5nZXREb20oJ2VsSWQnKTsKLy8gZ2V0cyBkb20gbm9kZSBiYXNlZCBvbiB0aGUgZG9tIG5vZGUKdmFyIGVsRG9tMSA9IEV4dC5nZXREb20oZWxEb20pOwoKLy8gSWYgd2UgZG9uJiMzOTt0IGtub3cgaWYgd2UgYXJlIHdvcmtpbmcgd2l0aCBhbgovLyBFeHQuRWxlbWVudCBvciBhIGRvbSBub2RlIHVzZSBFeHQuZ2V0RG9tCmZ1bmN0aW9uKGVsKXsKICAgIHZhciBkb20gPSBFeHQuZ2V0RG9tKGVsKTsKICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBkb20gbm9kZQp9CiAgICAgICAgICogPC9jb2RlPjwvcHJlPgogICAgICAgICAqIDxiPk5vdGU8L2I+OiB0aGUgZG9tIG5vZGUgdG8gYmUgZm91bmQgYWN0dWFsbHkgbmVlZHMgdG8gZXhpc3QgKGJlIHJlbmRlcmVkLCBldGMpCiAgICAgICAgICogd2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gYmUgc3VjY2Vzc2Z1bC4KICAgICAgICAgKiBAcGFyYW0ge01peGVkfSBlbAogICAgICAgICAqIEByZXR1cm4gSFRNTEVsZW1lbnQKICAgICAgICAgKi8KICAgICAgICBnZXREb20gOiBmdW5jdGlvbihlbCwgc3RyaWN0KXsKICAgICAgICAgICAgaWYoIWVsIHx8ICFET0MpewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVsLmRvbSl7CiAgICAgICAgICAgICAgICByZXR1cm4gZWwuZG9tOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCA9PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gRE9DLmdldEVsZW1lbnRCeUlkKGVsKTsKICAgICAgICAgICAgICAgICAgICAvLyBJRSByZXR1cm5zIGVsZW1lbnRzIHdpdGggdGhlICduYW1lJyBhbmQgJ2lkJyBhdHRyaWJ1dGUuCiAgICAgICAgICAgICAgICAgICAgLy8gd2UgZG8gYSBzdHJpY3QgY2hlY2sgdG8gcmV0dXJuIHRoZSBlbGVtZW50IHdpdGggb25seSB0aGUgaWQgYXR0cmlidXRlCiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgaXNJRSAmJiBzdHJpY3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsID09IGUuZ2V0QXR0cmlidXRlKCdpZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50IGJvZHkgYXMgYW4ge0BsaW5rIEV4dC5FbGVtZW50fS4KICAgICAgICAgKiBAcmV0dXJuIEV4dC5FbGVtZW50IFRoZSBkb2N1bWVudCBib2R5CiAgICAgICAgICovCiAgICAgICAgZ2V0Qm9keSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHJldHVybiBFeHQuZ2V0KERPQy5ib2R5IHx8IERPQy5kb2N1bWVudEVsZW1lbnQpOwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudCBib2R5IGFzIGFuIHtAbGluayBFeHQuRWxlbWVudH0uCiAgICAgICAgICogQHJldHVybiBFeHQuRWxlbWVudCBUaGUgZG9jdW1lbnQgYm9keQogICAgICAgICAqLwogICAgICAgIGdldEhlYWQgOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGhlYWQ7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoaGVhZCA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBoZWFkID0gRXh0LmdldChET0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBoZWFkOwogICAgICAgICAgICB9OwogICAgICAgIH0oKSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmVtb3ZlcyBhIERPTSBub2RlIGZyb20gdGhlIGRvY3VtZW50LgogICAgICAgICAqLwogICAgICAgIC8qKgogICAgICAgICAqIDxwPlJlbW92ZXMgdGhpcyBlbGVtZW50IGZyb20gdGhlIGRvY3VtZW50LCByZW1vdmVzIGFsbCBET00gZXZlbnQgbGlzdGVuZXJzLCBhbmQgZGVsZXRlcyB0aGUgY2FjaGUgcmVmZXJlbmNlLgogICAgICAgICAqIEFsbCBET00gZXZlbnQgbGlzdGVuZXJzIGFyZSByZW1vdmVkIGZyb20gdGhpcyBlbGVtZW50LiBJZiB7QGxpbmsgRXh0I2VuYWJsZU5lc3RlZExpc3RlbmVyUmVtb3ZhbH0gaXMKICAgICAgICAgKiA8Y29kZT50cnVlPC9jb2RlPiwgdGhlbiBET00gZXZlbnQgbGlzdGVuZXJzIGFyZSBhbHNvIHJlbW92ZWQgZnJvbSBhbGwgY2hpbGQgbm9kZXMuIFRoZSBib2R5IG5vZGUKICAgICAgICAgKiB3aWxsIGJlIGlnbm9yZWQgaWYgcGFzc2VkIGluLjwvcD4KICAgICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZQogICAgICAgICAqLwogICAgICAgIHJlbW92ZU5vZGUgOiBpc0lFICYmICFpc0lFOCA/IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBkOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obil7CiAgICAgICAgICAgICAgICBpZihuICYmIG4udGFnTmFtZSAhPSAnQk9EWScpewogICAgICAgICAgICAgICAgICAgIChFeHQuZW5hYmxlTmVzdGVkTGlzdGVuZXJSZW1vdmFsKSA/IEV4dC5FdmVudE1hbmFnZXIucHVyZ2VFbGVtZW50KG4sIHRydWUpIDogRXh0LkV2ZW50TWFuYWdlci5yZW1vdmVBbGwobik7CiAgICAgICAgICAgICAgICAgICAgZCA9IGQgfHwgRE9DLmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgIGQuYXBwZW5kQ2hpbGQobik7CiAgICAgICAgICAgICAgICAgICAgZC5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgRXh0LmVsQ2FjaGVbbi5pZF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSgpIDogZnVuY3Rpb24obil7CiAgICAgICAgICAgIGlmKG4gJiYgbi5wYXJlbnROb2RlICYmIG4udGFnTmFtZSAhPSAnQk9EWScpewogICAgICAgICAgICAgICAgKEV4dC5lbmFibGVOZXN0ZWRMaXN0ZW5lclJlbW92YWwpID8gRXh0LkV2ZW50TWFuYWdlci5wdXJnZUVsZW1lbnQobiwgdHJ1ZSkgOiBFeHQuRXZlbnRNYW5hZ2VyLnJlbW92ZUFsbChuKTsKICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBFeHQuZWxDYWNoZVtuLmlkXTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIDxwPlJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIGVtcHR5LjwvcD4KICAgICAgICAgKiA8cD5UaGUgdmFsdWUgaXMgZGVlbWVkIHRvIGJlIGVtcHR5IGlmIGl0IGlzPGRpdiBjbGFzcz0ibWRldGFpbC1wYXJhbXMiPjx1bD4KICAgICAgICAgKiA8bGk+bnVsbDwvbGk+CiAgICAgICAgICogPGxpPnVuZGVmaW5lZDwvbGk+CiAgICAgICAgICogPGxpPmFuIGVtcHR5IGFycmF5PC9saT4KICAgICAgICAgKiA8bGk+YSB6ZXJvIGxlbmd0aCBzdHJpbmcgKFVubGVzcyB0aGUgPHR0PmFsbG93Qmxhbms8L3R0PiBwYXJhbWV0ZXIgaXMgPHR0PnRydWU8L3R0Pik8L2xpPgogICAgICAgICAqIDwvdWw+PC9kaXY+CiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QKICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFsbG93QmxhbmsgKG9wdGlvbmFsKSB0cnVlIHRvIGFsbG93IGVtcHR5IHN0cmluZ3MgKGRlZmF1bHRzIHRvIGZhbHNlKQogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNFbXB0eSA6IGZ1bmN0aW9uKHYsIGFsbG93QmxhbmspewogICAgICAgICAgICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgfHwgKChFeHQuaXNBcnJheSh2KSAmJiAhdi5sZW5ndGgpKSB8fCAoIWFsbG93QmxhbmsgPyB2ID09PSAnJyA6IGZhbHNlKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyBhIEphdmFTY3JpcHQgYXJyYXksIG90aGVyd2lzZSBmYWxzZS4KICAgICAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdAogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNBcnJheSA6IGZ1bmN0aW9uKHYpewogICAgICAgICAgICByZXR1cm4gdG9TdHJpbmcuYXBwbHkodikgPT09ICdbb2JqZWN0IEFycmF5XSc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgb2JqZWN0IGlzIGEgSmF2YVNjcmlwdCBkYXRlIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlLgogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byB0ZXN0CiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc0RhdGUgOiBmdW5jdGlvbih2KXsKICAgICAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmFwcGx5KHYpID09PSAnW29iamVjdCBEYXRlXSc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBKYXZhU2NyaXB0IE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlLgogICAgICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0CiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc09iamVjdCA6IGZ1bmN0aW9uKHYpewogICAgICAgICAgICByZXR1cm4gISF2ICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBKYXZhU2NyaXB0ICdwcmltaXRpdmUnLCBhIHN0cmluZywgbnVtYmVyIG9yIGJvb2xlYW4uCiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzUHJpbWl0aXZlIDogZnVuY3Rpb24odil7CiAgICAgICAgICAgIHJldHVybiBFeHQuaXNTdHJpbmcodikgfHwgRXh0LmlzTnVtYmVyKHYpIHx8IEV4dC5pc0Jvb2xlYW4odik7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBKYXZhU2NyaXB0IEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2UuCiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzRnVuY3Rpb24gOiBmdW5jdGlvbih2KXsKICAgICAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmFwcGx5KHYpID09PSAnW29iamVjdCBGdW5jdGlvbl0nOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIGEgbnVtYmVyLiBSZXR1cm5zIGZhbHNlIGZvciBub24tZmluaXRlIG51bWJlcnMuCiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzTnVtYmVyIDogZnVuY3Rpb24odil7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodik7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBzdHJpbmcuCiAgICAgICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QKICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzU3RyaW5nIDogZnVuY3Rpb24odil7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZyc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYSBib29sZWFuLgogICAgICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0CiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc0Jvb2xlYW4gOiBmdW5jdGlvbih2KXsKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbic7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgYW4gSFRNTEVsZW1lbnQKICAgICAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdAogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNFbGVtZW50IDogZnVuY3Rpb24odikgewogICAgICAgICAgICByZXR1cm4gdiA/ICEhdi50YWdOYW1lIDogZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgbm90IHVuZGVmaW5lZC4KICAgICAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdAogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNEZWZpbmVkIDogZnVuY3Rpb24odil7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgZGV0ZWN0ZWQgYnJvd3NlciBpcyBPcGVyYS4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNPcGVyYSA6IGlzT3BlcmEsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgZGV0ZWN0ZWQgYnJvd3NlciB1c2VzIFdlYktpdC4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNXZWJLaXQgOiBpc1dlYktpdCwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIENocm9tZS4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNDaHJvbWUgOiBpc0Nocm9tZSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIFNhZmFyaS4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNTYWZhcmkgOiBpc1NhZmFyaSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIFNhZmFyaSAzLnguCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzU2FmYXJpMyA6IGlzU2FmYXJpMywKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIFNhZmFyaSA0LnguCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzU2FmYXJpNCA6IGlzU2FmYXJpNCwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIFNhZmFyaSAyLnguCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzU2FmYXJpMiA6IGlzU2FmYXJpMiwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyLgogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBpc0lFIDogaXNJRSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyIDYueC4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNJRTYgOiBpc0lFNiwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyIDcueC4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNJRTcgOiBpc0lFNywKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyIDgueC4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNJRTggOiBpc0lFOCwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyIDkueC4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNJRTkgOiBpc0lFOSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIHVzZXMgdGhlIEdlY2tvIGxheW91dCBlbmdpbmUgKGUuZy4gTW96aWxsYSwgRmlyZWZveCkuCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzR2Vja28gOiBpc0dlY2tvLAogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgaWYgdGhlIGRldGVjdGVkIGJyb3dzZXIgdXNlcyBhIHByZS1HZWNrbyAxLjkgbGF5b3V0IGVuZ2luZSAoZS5nLiBGaXJlZm94IDIueCkuCiAgICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgICAqLwogICAgICAgIGlzR2Vja28yIDogaXNHZWNrbzIsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgZGV0ZWN0ZWQgYnJvd3NlciB1c2VzIGEgR2Vja28gMS45KyBsYXlvdXQgZW5naW5lIChlLmcuIEZpcmVmb3ggMy54KS4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNHZWNrbzMgOiBpc0dlY2tvMywKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyIHJ1bm5pbmcgaW4gbm9uLXN0cmljdCBtb2RlLgogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBpc0JvcmRlckJveCA6IGlzQm9yZGVyQm94LAogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgaWYgdGhlIGRldGVjdGVkIHBsYXRmb3JtIGlzIExpbnV4LgogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBpc0xpbnV4IDogaXNMaW51eCwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBkZXRlY3RlZCBwbGF0Zm9ybSBpcyBXaW5kb3dzLgogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBpc1dpbmRvd3MgOiBpc1dpbmRvd3MsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgZGV0ZWN0ZWQgcGxhdGZvcm0gaXMgTWFjIE9TLgogICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgKi8KICAgICAgICBpc01hYyA6IGlzTWFjLAogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgaWYgdGhlIGRldGVjdGVkIHBsYXRmb3JtIGlzIEFkb2JlIEFpci4KICAgICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAgICovCiAgICAgICAgaXNBaXIgOiBpc0FpcgogICAgfSk7CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIG5hbWVzcGFjZXMgdG8gYmUgdXNlZCBmb3Igc2NvcGluZyB2YXJpYWJsZXMgYW5kIGNsYXNzZXMgc28gdGhhdCB0aGV5IGFyZSBub3QgZ2xvYmFsLgogICAgICogU3BlY2lmeWluZyB0aGUgbGFzdCBub2RlIG9mIGEgbmFtZXNwYWNlIGltcGxpY2l0bHkgY3JlYXRlcyBhbGwgb3RoZXIgbm9kZXMuIFVzYWdlOgogICAgICogPHByZT48Y29kZT4KRXh0Lm5hbWVzcGFjZSgnQ29tcGFueScsICdDb21wYW55LmRhdGEnKTsKRXh0Lm5hbWVzcGFjZSgnQ29tcGFueS5kYXRhJyk7IC8vIGVxdWl2YWxlbnQgYW5kIHByZWZlcmFibGUgdG8gYWJvdmUgc3ludGF4CkNvbXBhbnkuV2lkZ2V0ID0gZnVuY3Rpb24oKSB7IC4uLiB9CkNvbXBhbnkuZGF0YS5DdXN0b21TdG9yZSA9IGZ1bmN0aW9uKGNvbmZpZykgeyAuLi4gfQo8L2NvZGU+PC9wcmU+CiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlMQogICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZTIKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldGMKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5hbWVzcGFjZSBvYmplY3QuIChJZiBtdWx0aXBsZSBhcmd1bWVudHMgYXJlIHBhc3NlZCwgdGhpcyB3aWxsIGJlIHRoZSBsYXN0IG5hbWVzcGFjZSBjcmVhdGVkKQogICAgICogQG1ldGhvZCBucwogICAgICovCiAgICBFeHQubnMgPSBFeHQubmFtZXNwYWNlOwp9KSgpOwoKRXh0Lm5zKCdFeHQudXRpbCcsICdFeHQubGliJywgJ0V4dC5kYXRhJywgJ0V4dC5zdXBwb3J0cycpOwoKRXh0LmVsQ2FjaGUgPSB7fTsKCi8qKgogKiBAY2xhc3MgRnVuY3Rpb24KICogVGhlc2UgZnVuY3Rpb25zIGFyZSBhdmFpbGFibGUgb24gZXZlcnkgRnVuY3Rpb24gb2JqZWN0IChhbnkgSmF2YVNjcmlwdCBmdW5jdGlvbikuCiAqLwpFeHQuYXBwbHkoRnVuY3Rpb24ucHJvdG90eXBlLCB7CiAgICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGludGVyY2VwdG9yIGZ1bmN0aW9uLiBUaGUgcGFzc2VkIGZ1bmN0aW9uIGlzIGNhbGxlZCBiZWZvcmUgdGhlIG9yaWdpbmFsIG9uZS4gSWYgaXQgcmV0dXJucyBmYWxzZSwKICAgICAqIHRoZSBvcmlnaW5hbCBvbmUgaXMgbm90IGNhbGxlZC4gVGhlIHJlc3VsdGluZyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXN1bHRzIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi4KICAgICAqIFRoZSBwYXNzZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIHBhcmFtZXRlcnMgb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLiBFeGFtcGxlIHVzYWdlOgogICAgICogPHByZT48Y29kZT4KdmFyIHNheUhpID0gZnVuY3Rpb24obmFtZSl7CiAgICBhbGVydCgnSGksICcgKyBuYW1lKTsKfQoKc2F5SGkoJ0ZyZWQnKTsgLy8gYWxlcnRzICJIaSwgRnJlZCIKCi8vIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiB0aGF0IHZhbGlkYXRlcyBpbnB1dCB3aXRob3V0Ci8vIGRpcmVjdGx5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb246CnZhciBzYXlIaVRvRnJpZW5kID0gc2F5SGkuY3JlYXRlSW50ZXJjZXB0b3IoZnVuY3Rpb24obmFtZSl7CiAgICByZXR1cm4gbmFtZSA9PSAnQnJpYW4nOwp9KTsKCnNheUhpVG9GcmllbmQoJ0ZyZWQnKTsgIC8vIG5vIGFsZXJ0CnNheUhpVG9GcmllbmQoJ0JyaWFuJyk7IC8vIGFsZXJ0cyAiSGksIEJyaWFuIgo8L2NvZGU+PC9wcmU+CiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmY24gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgYmVmb3JlIHRoZSBvcmlnaW5hbAogICAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIChvcHRpb25hbCkgVGhlIHNjb3BlICg8Y29kZT48Yj50aGlzPC9iPjwvY29kZT4gcmVmZXJlbmNlKSBpbiB3aGljaCB0aGUgcGFzc2VkIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLgogICAgICogPGI+SWYgb21pdHRlZCwgZGVmYXVsdHMgdG8gdGhlIHNjb3BlIGluIHdoaWNoIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBpcyBjYWxsZWQgb3IgdGhlIGJyb3dzZXIgd2luZG93LjwvYj4KICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgbmV3IGZ1bmN0aW9uCiAgICAgKi8KICAgIGNyZWF0ZUludGVyY2VwdG9yIDogZnVuY3Rpb24oZmNuLCBzY29wZSl7CiAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXM7CiAgICAgICAgcmV0dXJuICFFeHQuaXNGdW5jdGlvbihmY24pID8KICAgICAgICAgICAgICAgIHRoaXMgOgogICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICBmY24udGFyZ2V0ID0gbWU7CiAgICAgICAgICAgICAgICAgICAgZmNuLm1ldGhvZCA9IG1ldGhvZDsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZjbi5hcHBseShzY29wZSB8fCBtZSB8fCB3aW5kb3csIGFyZ3MpICE9PSBmYWxzZSkgPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLmFwcGx5KG1lIHx8IHdpbmRvdywgYXJncykgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDsKICAgICAgICAgICAgICAgIH07CiAgICB9LAoKICAgICAvKioKICAgICAqIENyZWF0ZXMgYSBjYWxsYmFjayB0aGF0IHBhc3NlcyBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCAuLi4KICAgICAqIENhbGwgZGlyZWN0bHkgb24gYW55IGZ1bmN0aW9uLiBFeGFtcGxlOiA8Y29kZT5teUZ1bmN0aW9uLmNyZWF0ZUNhbGxiYWNrKGFyZzEsIGFyZzIpPC9jb2RlPgogICAgICogV2lsbCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIHRob3NlIDIgYXJncy4gPGI+SWYgYSBzcGVjaWZpYyBzY29wZSBpcyByZXF1aXJlZCBpbiB0aGUKICAgICAqIGNhbGxiYWNrLCB1c2Uge0BsaW5rICNjcmVhdGVEZWxlZ2F0ZX0gaW5zdGVhZC48L2I+IFRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBjcmVhdGVDYWxsYmFjayBhbHdheXMKICAgICAqIGV4ZWN1dGVzIGluIHRoZSB3aW5kb3cgc2NvcGUuCiAgICAgKiA8cD5UaGlzIG1ldGhvZCBpcyByZXF1aXJlZCB3aGVuIHlvdSB3YW50IHRvIHBhc3MgYXJndW1lbnRzIHRvIGEgY2FsbGJhY2sgZnVuY3Rpb24uICBJZiBubyBhcmd1bWVudHMKICAgICAqIGFyZSBuZWVkZWQsIHlvdSBjYW4gc2ltcGx5IHBhc3MgYSByZWZlcmVuY2UgdG8gdGhlIGZ1bmN0aW9uIGFzIGEgY2FsbGJhY2sgKGUuZy4sIGNhbGxiYWNrOiBteUZuKS4KICAgICAqIEhvd2V2ZXIsIGlmIHlvdSB0cmllZCB0byBwYXNzIGEgZnVuY3Rpb24gd2l0aCBhcmd1bWVudHMgKGUuZy4sIGNhbGxiYWNrOiBteUZuKGFyZzEsIGFyZzIpKSB0aGUgZnVuY3Rpb24KICAgICAqIHdvdWxkIHNpbXBseSBleGVjdXRlIGltbWVkaWF0ZWx5IHdoZW4gdGhlIGNvZGUgaXMgcGFyc2VkLiBFeGFtcGxlIHVzYWdlOgogICAgICogPHByZT48Y29kZT4KdmFyIHNheUhpID0gZnVuY3Rpb24obmFtZSl7CiAgICBhbGVydCgnSGksICcgKyBuYW1lKTsKfQoKLy8gY2xpY2tpbmcgdGhlIGJ1dHRvbiBhbGVydHMgIkhpLCBGcmVkIgpuZXcgRXh0LkJ1dHRvbih7CiAgICB0ZXh0OiAnU2F5IEhpJywKICAgIHJlbmRlclRvOiBFeHQuZ2V0Qm9keSgpLAogICAgaGFuZGxlcjogc2F5SGkuY3JlYXRlQ2FsbGJhY2soJ0ZyZWQnKQp9KTsKPC9jb2RlPjwvcHJlPgogICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBuZXcgZnVuY3Rpb24KICAgICovCiAgICBjcmVhdGVDYWxsYmFjayA6IGZ1bmN0aW9uKC8qYXJncy4uLiovKXsKICAgICAgICAvLyBtYWtlIGFyZ3MgYXZhaWxhYmxlLCBpbiBmdW5jdGlvbiBiZWxvdwogICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgICBtZXRob2QgPSB0aGlzOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh3aW5kb3csIGFyZ3MpOwogICAgICAgIH07CiAgICB9LAoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGRlbGVnYXRlIChjYWxsYmFjaykgdGhhdCBzZXRzIHRoZSBzY29wZSB0byBvYmouCiAgICAgKiBDYWxsIGRpcmVjdGx5IG9uIGFueSBmdW5jdGlvbi4gRXhhbXBsZTogPGNvZGU+dGhpcy5teUZ1bmN0aW9uLmNyZWF0ZURlbGVnYXRlKHRoaXMsIFthcmcxLCBhcmcyXSk8L2NvZGU+CiAgICAgKiBXaWxsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgaXMgYXV0b21hdGljYWxseSBzY29wZWQgdG8gb2JqIHNvIHRoYXQgdGhlIDx0dD50aGlzPC90dD4gdmFyaWFibGUgaW5zaWRlIHRoZQogICAgICogY2FsbGJhY2sgcG9pbnRzIHRvIG9iai4gRXhhbXBsZSB1c2FnZToKICAgICAqIDxwcmU+PGNvZGU+CnZhciBzYXlIaSA9IGZ1bmN0aW9uKG5hbWUpewogICAgLy8gTm90ZSB0aGlzIHVzZSBvZiAidGhpcy50ZXh0IiBoZXJlLiAgVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRvCiAgICAvLyBleGVjdXRlIHdpdGhpbiBhIHNjb3BlIHRoYXQgY29udGFpbnMgYSB0ZXh0IHByb3BlcnR5LiAgSW4gdGhpcwogICAgLy8gZXhhbXBsZSwgdGhlICJ0aGlzIiB2YXJpYWJsZSBpcyBwb2ludGluZyB0byB0aGUgYnRuIG9iamVjdCB0aGF0CiAgICAvLyB3YXMgcGFzc2VkIGluIGNyZWF0ZURlbGVnYXRlIGJlbG93LgogICAgYWxlcnQoJ0hpLCAnICsgbmFtZSArICcuIFlvdSBjbGlja2VkIHRoZSAiJyArIHRoaXMudGV4dCArICciIGJ1dHRvbi4nKTsKfQoKdmFyIGJ0biA9IG5ldyBFeHQuQnV0dG9uKHsKICAgIHRleHQ6ICdTYXkgSGknLAogICAgcmVuZGVyVG86IEV4dC5nZXRCb2R5KCkKfSk7CgovLyBUaGlzIGNhbGxiYWNrIHdpbGwgZXhlY3V0ZSBpbiB0aGUgc2NvcGUgb2YgdGhlCi8vIGJ1dHRvbiBpbnN0YW5jZS4gQ2xpY2tpbmcgdGhlIGJ1dHRvbiBhbGVydHMKLy8gIkhpLCBGcmVkLiBZb3UgY2xpY2tlZCB0aGUgIlNheSBIaSIgYnV0dG9uLiIKYnRuLm9uKCdjbGljaycsIHNheUhpLmNyZWF0ZURlbGVnYXRlKGJ0biwgWydGcmVkJ10pKTsKPC9jb2RlPjwvcHJlPgogICAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIChvcHRpb25hbCkgVGhlIHNjb3BlICg8Y29kZT48Yj50aGlzPC9iPjwvY29kZT4gcmVmZXJlbmNlKSBpbiB3aGljaCB0aGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQuCiAgICAgKiA8Yj5JZiBvbWl0dGVkLCBkZWZhdWx0cyB0byB0aGUgYnJvd3NlciB3aW5kb3cuPC9iPgogICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAob3B0aW9uYWwpIE92ZXJyaWRlcyBhcmd1bWVudHMgZm9yIHRoZSBjYWxsLiAoRGVmYXVsdHMgdG8gdGhlIGFyZ3VtZW50cyBwYXNzZWQgYnkgdGhlIGNhbGxlcikKICAgICAqIEBwYXJhbSB7Qm9vbGVhbi9OdW1iZXJ9IGFwcGVuZEFyZ3MgKG9wdGlvbmFsKSBpZiBUcnVlIGFyZ3MgYXJlIGFwcGVuZGVkIHRvIGNhbGwgYXJncyBpbnN0ZWFkIG9mIG92ZXJyaWRpbmcsCiAgICAgKiBpZiBhIG51bWJlciB0aGUgYXJncyBhcmUgaW5zZXJ0ZWQgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbgogICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBuZXcgZnVuY3Rpb24KICAgICAqLwogICAgY3JlYXRlRGVsZWdhdGUgOiBmdW5jdGlvbihvYmosIGFyZ3MsIGFwcGVuZEFyZ3MpewogICAgICAgIHZhciBtZXRob2QgPSB0aGlzOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGNhbGxBcmdzID0gYXJncyB8fCBhcmd1bWVudHM7CiAgICAgICAgICAgIGlmIChhcHBlbmRBcmdzID09PSB0cnVlKXsKICAgICAgICAgICAgICAgIGNhbGxBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgICAgICAgICAgICAgIGNhbGxBcmdzID0gY2FsbEFyZ3MuY29uY2F0KGFyZ3MpOwogICAgICAgICAgICB9ZWxzZSBpZiAoRXh0LmlzTnVtYmVyKGFwcGVuZEFyZ3MpKXsKICAgICAgICAgICAgICAgIGNhbGxBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsgLy8gY29weSBhcmd1bWVudHMgZmlyc3QKICAgICAgICAgICAgICAgIHZhciBhcHBseUFyZ3MgPSBbYXBwZW5kQXJncywgMF0uY29uY2F0KGFyZ3MpOyAvLyBjcmVhdGUgbWV0aG9kIGNhbGwgcGFyYW1zCiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGNhbGxBcmdzLCBhcHBseUFyZ3MpOyAvLyBzcGxpY2UgdGhlbSBpbgogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkob2JqIHx8IHdpbmRvdywgY2FsbEFyZ3MpOwogICAgICAgIH07CiAgICB9LAoKICAgIC8qKgogICAgICogQ2FsbHMgdGhpcyBmdW5jdGlvbiBhZnRlciB0aGUgbnVtYmVyIG9mIG1pbGxzZWNvbmRzIHNwZWNpZmllZCwgb3B0aW9uYWxseSBpbiBhIHNwZWNpZmljIHNjb3BlLiBFeGFtcGxlIHVzYWdlOgogICAgICogPHByZT48Y29kZT4KdmFyIHNheUhpID0gZnVuY3Rpb24obmFtZSl7CiAgICBhbGVydCgnSGksICcgKyBuYW1lKTsKfQoKLy8gZXhlY3V0ZXMgaW1tZWRpYXRlbHk6CnNheUhpKCdGcmVkJyk7CgovLyBleGVjdXRlcyBhZnRlciAyIHNlY29uZHM6CnNheUhpLmRlZmVyKDIwMDAsIHRoaXMsIFsnRnJlZCddKTsKCi8vIHRoaXMgc3ludGF4IGlzIHNvbWV0aW1lcyB1c2VmdWwgZm9yIGRlZmVycmluZwovLyBleGVjdXRpb24gb2YgYW4gYW5vbnltb3VzIGZ1bmN0aW9uOgooZnVuY3Rpb24oKXsKICAgIGFsZXJ0KCdBbm9ueW1vdXMnKTsKfSkuZGVmZXIoMTAwKTsKPC9jb2RlPjwvcHJlPgogICAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbGxpcyBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHNldFRpbWVvdXQgY2FsbCAoaWYgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDAgdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5KQogICAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIChvcHRpb25hbCkgVGhlIHNjb3BlICg8Y29kZT48Yj50aGlzPC9iPjwvY29kZT4gcmVmZXJlbmNlKSBpbiB3aGljaCB0aGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQuCiAgICAgKiA8Yj5JZiBvbWl0dGVkLCBkZWZhdWx0cyB0byB0aGUgYnJvd3NlciB3aW5kb3cuPC9iPgogICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAob3B0aW9uYWwpIE92ZXJyaWRlcyBhcmd1bWVudHMgZm9yIHRoZSBjYWxsLiAoRGVmYXVsdHMgdG8gdGhlIGFyZ3VtZW50cyBwYXNzZWQgYnkgdGhlIGNhbGxlcikKICAgICAqIEBwYXJhbSB7Qm9vbGVhbi9OdW1iZXJ9IGFwcGVuZEFyZ3MgKG9wdGlvbmFsKSBpZiBUcnVlIGFyZ3MgYXJlIGFwcGVuZGVkIHRvIGNhbGwgYXJncyBpbnN0ZWFkIG9mIG92ZXJyaWRpbmcsCiAgICAgKiBpZiBhIG51bWJlciB0aGUgYXJncyBhcmUgaW5zZXJ0ZWQgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbgogICAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgdGltZW91dCBpZCB0aGF0IGNhbiBiZSB1c2VkIHdpdGggY2xlYXJUaW1lb3V0CiAgICAgKi8KICAgIGRlZmVyIDogZnVuY3Rpb24obWlsbGlzLCBvYmosIGFyZ3MsIGFwcGVuZEFyZ3MpewogICAgICAgIHZhciBmbiA9IHRoaXMuY3JlYXRlRGVsZWdhdGUob2JqLCBhcmdzLCBhcHBlbmRBcmdzKTsKICAgICAgICBpZihtaWxsaXMgPiAwKXsKICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZm4sIG1pbGxpcyk7CiAgICAgICAgfQogICAgICAgIGZuKCk7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9Cn0pOwoKLyoqCiAqIEBjbGFzcyBTdHJpbmcKICogVGhlc2UgZnVuY3Rpb25zIGFyZSBhdmFpbGFibGUgb24gZXZlcnkgU3RyaW5nIG9iamVjdC4KICovCkV4dC5hcHBseUlmKFN0cmluZywgewogICAgLyoqCiAgICAgKiBBbGxvd3MgeW91IHRvIGRlZmluZSBhIHRva2VuaXplZCBzdHJpbmcgYW5kIHBhc3MgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBhcmd1bWVudHMgdG8gcmVwbGFjZSB0aGUgdG9rZW5zLiAgRWFjaAogICAgICogdG9rZW4gbXVzdCBiZSB1bmlxdWUsIGFuZCBtdXN0IGluY3JlbWVudCBpbiB0aGUgZm9ybWF0IHswfSwgezF9LCBldGMuICBFeGFtcGxlIHVzYWdlOgogICAgICogPHByZT48Y29kZT4KdmFyIGNscyA9ICdteS1jbGFzcycsIHRleHQgPSAnU29tZSB0ZXh0JzsKdmFyIHMgPSBTdHJpbmcuZm9ybWF0KCcmbHQ7ZGl2IGNsYXNzPSJ7MH0iPnsxfSZsdDsvZGl2PicsIGNscywgdGV4dCk7Ci8vIHMgbm93IGNvbnRhaW5zIHRoZSBzdHJpbmc6ICcmbHQ7ZGl2IGNsYXNzPSJteS1jbGFzcyI+U29tZSB0ZXh0Jmx0Oy9kaXY+JwogICAgICogPC9jb2RlPjwvcHJlPgogICAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgdG9rZW5pemVkIHN0cmluZyB0byBiZSBmb3JtYXR0ZWQKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZTEgVGhlIHZhbHVlIHRvIHJlcGxhY2UgdG9rZW4gezB9CiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUyIEV0Yy4uLgogICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZwogICAgICogQHN0YXRpYwogICAgICovCiAgICBmb3JtYXQgOiBmdW5jdGlvbihmb3JtYXQpewogICAgICAgIHZhciBhcmdzID0gRXh0LnRvQXJyYXkoYXJndW1lbnRzLCAxKTsKICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1x7KFxkKylcfS9nLCBmdW5jdGlvbihtLCBpKXsKICAgICAgICAgICAgcmV0dXJuIGFyZ3NbaV07CiAgICAgICAgfSk7CiAgICB9Cn0pOwoKLyoqCiAqIEBjbGFzcyBBcnJheQogKi8KRXh0LmFwcGx5SWYoQXJyYXkucHJvdG90eXBlLCB7CiAgICAvKioKICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIG9iamVjdCBleGlzdHMgaW4gdGhlIGFycmF5LgogICAgICogQHBhcmFtIHtPYmplY3R9IG8gVGhlIG9iamVjdCB0byBjaGVjayBmb3IKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcm9tIChPcHRpb25hbCkgVGhlIGluZGV4IGF0IHdoaWNoIHRvIGJlZ2luIHRoZSBzZWFyY2gKICAgICAqIEByZXR1cm4ge051bWJlcn0gVGhlIGluZGV4IG9mIG8gaW4gdGhlIGFycmF5IChvciAtMSBpZiBpdCBpcyBub3QgZm91bmQpCiAgICAgKi8KICAgIGluZGV4T2YgOiBmdW5jdGlvbihvLCBmcm9tKXsKICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CiAgICAgICAgZnJvbSA9IGZyb20gfHwgMDsKICAgICAgICBmcm9tICs9IChmcm9tIDwgMCkgPyBsZW4gOiAwOwogICAgICAgIGZvciAoOyBmcm9tIDwgbGVuOyArK2Zyb20pewogICAgICAgICAgICBpZih0aGlzW2Zyb21dID09PSBvKXsKICAgICAgICAgICAgICAgIHJldHVybiBmcm9tOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAtMTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGZyb20gdGhlIGFycmF5LiAgSWYgdGhlIG9iamVjdCBpcyBub3QgZm91bmQgbm90aGluZyBoYXBwZW5zLgogICAgICogQHBhcmFtIHtPYmplY3R9IG8gVGhlIG9iamVjdCB0byByZW1vdmUKICAgICAqIEByZXR1cm4ge0FycmF5fSB0aGlzIGFycmF5CiAgICAgKi8KICAgIHJlbW92ZSA6IGZ1bmN0aW9uKG8pewogICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihvKTsKICAgICAgICBpZihpbmRleCAhPSAtMSl7CiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9Cn0pOwovKioKICogQGNsYXNzIEV4dC51dGlsLlRhc2tSdW5uZXIKICogUHJvdmlkZXMgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBvbmUgb3IgbW9yZSBhcmJpdHJhcnkgdGFza3MgaW4gYSBtdWx0aXRocmVhZGVkCiAqIG1hbm5lci4gIEdlbmVyYWxseSwgeW91IGNhbiB1c2UgdGhlIHNpbmdsZXRvbiB7QGxpbmsgRXh0LlRhc2tNZ3J9IGluc3RlYWQsIGJ1dAogKiBpZiBuZWVkZWQsIHlvdSBjYW4gY3JlYXRlIHNlcGFyYXRlIGluc3RhbmNlcyBvZiBUYXNrUnVubmVyLiAgQW55IG51bWJlciBvZgogKiBzZXBhcmF0ZSB0YXNrcyBjYW4gYmUgc3RhcnRlZCBhdCBhbnkgdGltZSBhbmQgd2lsbCBydW4gaW5kZXBlbmRlbnRseSBvZiBlYWNoCiAqIG90aGVyLiBFeGFtcGxlIHVzYWdlOgogKiA8cHJlPjxjb2RlPgovLyBTdGFydCBhIHNpbXBsZSBjbG9jayB0YXNrIHRoYXQgdXBkYXRlcyBhIGRpdiBvbmNlIHBlciBzZWNvbmQKdmFyIHVwZGF0ZUNsb2NrID0gZnVuY3Rpb24oKXsKICAgIEV4dC5mbHkoJ2Nsb2NrJykudXBkYXRlKG5ldyBEYXRlKCkuZm9ybWF0KCdnOmk6cyBBJykpOwp9IAp2YXIgdGFzayA9IHsKICAgIHJ1bjogdXBkYXRlQ2xvY2ssCiAgICBpbnRlcnZhbDogMTAwMCAvLzEgc2Vjb25kCn0KdmFyIHJ1bm5lciA9IG5ldyBFeHQudXRpbC5UYXNrUnVubmVyKCk7CnJ1bm5lci5zdGFydCh0YXNrKTsKCi8vIGVxdWl2YWxlbnQgdXNpbmcgVGFza01ncgpFeHQuVGFza01nci5zdGFydCh7CiAgICBydW46IHVwZGF0ZUNsb2NrLAogICAgaW50ZXJ2YWw6IDEwMDAKfSk7CgogKiA8L2NvZGU+PC9wcmU+CiAqIDxwPlNlZSB0aGUge0BsaW5rICNzdGFydH0gbWV0aG9kIGZvciBkZXRhaWxzIGFib3V0IGhvdyB0byBjb25maWd1cmUgYSB0YXNrIG9iamVjdC48L3A+CiAqIEFsc28gc2VlIHtAbGluayBFeHQudXRpbC5EZWxheWVkVGFza30uIAogKiAKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7TnVtYmVyfSBpbnRlcnZhbCAob3B0aW9uYWwpIFRoZSBtaW5pbXVtIHByZWNpc2lvbiBpbiBtaWxsaXNlY29uZHMgc3VwcG9ydGVkIGJ5IHRoaXMgVGFza1J1bm5lciBpbnN0YW5jZQogKiAoZGVmYXVsdHMgdG8gMTApCiAqLwpFeHQudXRpbC5UYXNrUnVubmVyID0gZnVuY3Rpb24oaW50ZXJ2YWwpewogICAgaW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCAxMDsKICAgIHZhciB0YXNrcyA9IFtdLCAKICAgIAlyZW1vdmVRdWV1ZSA9IFtdLAogICAgCWlkID0gMCwKICAgIAlydW5uaW5nID0gZmFsc2UsCgogICAgCS8vIHByaXZhdGUKICAgIAlzdG9wVGhyZWFkID0gZnVuY3Rpb24oKXsKCSAgICAgICAgcnVubmluZyA9IGZhbHNlOwoJICAgICAgICBjbGVhckludGVydmFsKGlkKTsKCSAgICAgICAgaWQgPSAwOwoJICAgIH0sCgogICAgCS8vIHByaXZhdGUKICAgIAlzdGFydFRocmVhZCA9IGZ1bmN0aW9uKCl7CgkgICAgICAgIGlmKCFydW5uaW5nKXsKCSAgICAgICAgICAgIHJ1bm5pbmcgPSB0cnVlOwoJICAgICAgICAgICAgaWQgPSBzZXRJbnRlcnZhbChydW5UYXNrcywgaW50ZXJ2YWwpOwoJICAgICAgICB9CgkgICAgfSwKCiAgICAJLy8gcHJpdmF0ZQogICAgCXJlbW92ZVRhc2sgPSBmdW5jdGlvbih0KXsKCSAgICAgICAgcmVtb3ZlUXVldWUucHVzaCh0KTsKCSAgICAgICAgaWYodC5vblN0b3ApewoJICAgICAgICAgICAgdC5vblN0b3AuYXBwbHkodC5zY29wZSB8fCB0KTsKCSAgICAgICAgfQoJICAgIH0sCgkgICAgCiAgICAJLy8gcHJpdmF0ZQogICAgCXJ1blRhc2tzID0gZnVuY3Rpb24oKXsKCSAgICAJdmFyIHJxTGVuID0gcmVtb3ZlUXVldWUubGVuZ3RoLAoJICAgIAkJbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CSAgICAJCQkgICAgCQkKCSAgICAKCSAgICAgICAgaWYocnFMZW4gPiAwKXsKCSAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBycUxlbjsgaSsrKXsKCSAgICAgICAgICAgICAgICB0YXNrcy5yZW1vdmUocmVtb3ZlUXVldWVbaV0pOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmVtb3ZlUXVldWUgPSBbXTsKCSAgICAgICAgICAgIGlmKHRhc2tzLmxlbmd0aCA8IDEpewoJICAgICAgICAgICAgICAgIHN0b3BUaHJlYWQoKTsKCSAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICB9CgkgICAgICAgIH0JICAgICAgICAKCSAgICAgICAgZm9yKHZhciBpID0gMCwgdCwgaXRpbWUsIHJ0LCBsZW4gPSB0YXNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7CgkgICAgICAgICAgICB0ID0gdGFza3NbaV07CgkgICAgICAgICAgICBpdGltZSA9IG5vdyAtIHQudGFza1J1blRpbWU7CgkgICAgICAgICAgICBpZih0LmludGVydmFsIDw9IGl0aW1lKXsKCSAgICAgICAgICAgICAgICBydCA9IHQucnVuLmFwcGx5KHQuc2NvcGUgfHwgdCwgdC5hcmdzIHx8IFsrK3QudGFza1J1bkNvdW50XSk7CgkgICAgICAgICAgICAgICAgdC50YXNrUnVuVGltZSA9IG5vdzsKCSAgICAgICAgICAgICAgICBpZihydCA9PT0gZmFsc2UgfHwgdC50YXNrUnVuQ291bnQgPT09IHQucmVwZWF0KXsKCSAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVGFzayh0KTsKCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIGlmKHQuZHVyYXRpb24gJiYgdC5kdXJhdGlvbiA8PSAobm93IC0gdC50YXNrU3RhcnRUaW1lKSl7CgkgICAgICAgICAgICAgICAgcmVtb3ZlVGFzayh0KTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgIH07CgogICAgLyoqCiAgICAgKiBTdGFydHMgYSBuZXcgdGFzay4KICAgICAqIEBtZXRob2Qgc3RhcnQKICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXNrIDxwPkEgY29uZmlnIG9iamVjdCB0aGF0IHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczo8dWw+CiAgICAgKiA8bGk+PGNvZGU+cnVuPC9jb2RlPiA6IEZ1bmN0aW9uPGRpdiBjbGFzcz0ic3ViLWRlc2MiPjxwPlRoZSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgdGFzayBpcyBpbnZva2VkLiBUaGUKICAgICAqIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGF0IGVhY2ggaW50ZXJ2YWwgYW5kIHBhc3NlZCB0aGUgPGNvZGU+YXJnczwvY29kZT4gYXJndW1lbnQgaWYgc3BlY2lmaWVkLCBhbmQgdGhlCiAgICAgKiBjdXJyZW50IGludm9jYXRpb24gY291bnQgaWYgbm90LjwvcD4KICAgICAqIDxwPklmIGEgcGFydGljdWxhciBzY29wZSAoPGNvZGU+dGhpczwvY29kZT4gcmVmZXJlbmNlKSBpcyByZXF1aXJlZCwgYmUgc3VyZSB0byBzcGVjaWZ5IGl0IHVzaW5nIHRoZSA8Y29kZT5zY29wZTwvY29kZT4gYXJndW1lbnQuPC9wPgogICAgICogPHA+UmV0dXJuIDxjb2RlPmZhbHNlPC9jb2RlPiBmcm9tIHRoaXMgZnVuY3Rpb24gdG8gdGVybWluYXRlIHRoZSB0YXNrLjwvcD48L2Rpdj48L2xpPgogICAgICogPGxpPjxjb2RlPmludGVydmFsPC9jb2RlPiA6IE51bWJlcjxkaXYgY2xhc3M9InN1Yi1kZXNjIj5UaGUgZnJlcXVlbmN5IGluIG1pbGxpc2Vjb25kcyB3aXRoIHdoaWNoIHRoZSB0YXNrCiAgICAgKiBzaG91bGQgYmUgaW52b2tlZC48L2Rpdj48L2xpPgogICAgICogPGxpPjxjb2RlPmFyZ3M8L2NvZGU+IDogQXJyYXk8ZGl2IGNsYXNzPSJzdWItZGVzYyI+KG9wdGlvbmFsKSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbgogICAgICogc3BlY2lmaWVkIGJ5IDxjb2RlPnJ1bjwvY29kZT4uIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBjdXJyZW50IGludm9jYXRpb24gY291bnQgaXMgcGFzc2VkLjwvZGl2PjwvbGk+CiAgICAgKiA8bGk+PGNvZGU+c2NvcGU8L2NvZGU+IDogT2JqZWN0PGRpdiBjbGFzcz0ic3ViLWRlc2MiPihvcHRpb25hbCkgVGhlIHNjb3BlICg8dHQ+dGhpczwvdHQ+IHJlZmVyZW5jZSkgaW4gd2hpY2ggdG8gZXhlY3V0ZSB0aGUKICAgICAqIDxjb2RlPnJ1bjwvY29kZT4gZnVuY3Rpb24uIERlZmF1bHRzIHRvIHRoZSB0YXNrIGNvbmZpZyBvYmplY3QuPC9kaXY+PC9saT4KICAgICAqIDxsaT48Y29kZT5kdXJhdGlvbjwvY29kZT4gOiBOdW1iZXI8ZGl2IGNsYXNzPSJzdWItZGVzYyI+KG9wdGlvbmFsKSBUaGUgbGVuZ3RoIG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIGludm9rZQogICAgICogdGhlIHRhc2sgYmVmb3JlIHN0b3BwaW5nIGF1dG9tYXRpY2FsbHkgKGRlZmF1bHRzIHRvIGluZGVmaW5pdGUpLjwvZGl2PjwvbGk+CiAgICAgKiA8bGk+PGNvZGU+cmVwZWF0PC9jb2RlPiA6IE51bWJlcjxkaXYgY2xhc3M9InN1Yi1kZXNjIj4ob3B0aW9uYWwpIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIHRoZSB0YXNrIGJlZm9yZQogICAgICogc3RvcHBpbmcgYXV0b21hdGljYWxseSAoZGVmYXVsdHMgdG8gaW5kZWZpbml0ZSkuPC9kaXY+PC9saT4KICAgICAqIDwvdWw+PC9wPgogICAgICogPHA+QmVmb3JlIGVhY2ggaW52b2NhdGlvbiwgRXh0IGluamVjdHMgdGhlIHByb3BlcnR5IDxjb2RlPnRhc2tSdW5Db3VudDwvY29kZT4gaW50byB0aGUgdGFzayBvYmplY3Qgc28KICAgICAqIHRoYXQgY2FsY3VsYXRpb25zIGJhc2VkIG9uIHRoZSByZXBlYXQgY291bnQgY2FuIGJlIHBlcmZvcm1lZC48L3A+CiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB0YXNrCiAgICAgKi8KICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbih0YXNrKXsKICAgICAgICB0YXNrcy5wdXNoKHRhc2spOwogICAgICAgIHRhc2sudGFza1N0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIHRhc2sudGFza1J1blRpbWUgPSAwOwogICAgICAgIHRhc2sudGFza1J1bkNvdW50ID0gMDsKICAgICAgICBzdGFydFRocmVhZCgpOwogICAgICAgIHJldHVybiB0YXNrOwogICAgfTsKCiAgICAvKioKICAgICAqIFN0b3BzIGFuIGV4aXN0aW5nIHJ1bm5pbmcgdGFzay4KICAgICAqIEBtZXRob2Qgc3RvcAogICAgICogQHBhcmFtIHtPYmplY3R9IHRhc2sgVGhlIHRhc2sgdG8gc3RvcAogICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdGFzawogICAgICovCiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbih0YXNrKXsKICAgICAgICByZW1vdmVUYXNrKHRhc2spOwogICAgICAgIHJldHVybiB0YXNrOwogICAgfTsKCiAgICAvKioKICAgICAqIFN0b3BzIGFsbCB0YXNrcyB0aGF0IGFyZSBjdXJyZW50bHkgcnVubmluZy4KICAgICAqIEBtZXRob2Qgc3RvcEFsbAogICAgICovCiAgICB0aGlzLnN0b3BBbGwgPSBmdW5jdGlvbigpewogICAgICAgIHN0b3BUaHJlYWQoKTsKICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0YXNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7CiAgICAgICAgICAgIGlmKHRhc2tzW2ldLm9uU3RvcCl7CiAgICAgICAgICAgICAgICB0YXNrc1tpXS5vblN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0YXNrcyA9IFtdOwogICAgICAgIHJlbW92ZVF1ZXVlID0gW107CiAgICB9Owp9OwoKLyoqCiAqIEBjbGFzcyBFeHQuVGFza01ncgogKiBAZXh0ZW5kcyBFeHQudXRpbC5UYXNrUnVubmVyCiAqIEEgc3RhdGljIHtAbGluayBFeHQudXRpbC5UYXNrUnVubmVyfSBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YXJ0IGFuZCBzdG9wIGFyYml0cmFyeSB0YXNrcy4gIFNlZQogKiB7QGxpbmsgRXh0LnV0aWwuVGFza1J1bm5lcn0gZm9yIHN1cHBvcnRlZCBtZXRob2RzIGFuZCB0YXNrIGNvbmZpZyBwcm9wZXJ0aWVzLgogKiA8cHJlPjxjb2RlPgovLyBTdGFydCBhIHNpbXBsZSBjbG9jayB0YXNrIHRoYXQgdXBkYXRlcyBhIGRpdiBvbmNlIHBlciBzZWNvbmQKdmFyIHRhc2sgPSB7CiAgICBydW46IGZ1bmN0aW9uKCl7CiAgICAgICAgRXh0LmZseSgnY2xvY2snKS51cGRhdGUobmV3IERhdGUoKS5mb3JtYXQoJ2c6aTpzIEEnKSk7CiAgICB9LAogICAgaW50ZXJ2YWw6IDEwMDAgLy8xIHNlY29uZAp9CkV4dC5UYXNrTWdyLnN0YXJ0KHRhc2spOwo8L2NvZGU+PC9wcmU+CiAqIDxwPlNlZSB0aGUge0BsaW5rICNzdGFydH0gbWV0aG9kIGZvciBkZXRhaWxzIGFib3V0IGhvdyB0byBjb25maWd1cmUgYSB0YXNrIG9iamVjdC48L3A+CiAqIEBzaW5nbGV0b24KICovCkV4dC5UYXNrTWdyID0gbmV3IEV4dC51dGlsLlRhc2tSdW5uZXIoKTsoZnVuY3Rpb24oKXsKCXZhciBsaWJGbHl3ZWlnaHQ7CgkKCWZ1bmN0aW9uIGZseShlbCkgewogICAgICAgIGlmICghbGliRmx5d2VpZ2h0KSB7CiAgICAgICAgICAgIGxpYkZseXdlaWdodCA9IG5ldyBFeHQuRWxlbWVudC5GbHl3ZWlnaHQoKTsKICAgICAgICB9CiAgICAgICAgbGliRmx5d2VpZ2h0LmRvbSA9IGVsOwogICAgICAgIHJldHVybiBsaWJGbHl3ZWlnaHQ7CiAgICB9CiAgICAKICAgIChmdW5jdGlvbigpewoJdmFyIGRvYyA9IGRvY3VtZW50LAoJCWlzQ1NTMSA9IGRvYy5jb21wYXRNb2RlID09ICJDU1MxQ29tcGF0IiwKCQlNQVggPSBNYXRoLm1heCwJCQogICAgICAgIFJPVU5EID0gTWF0aC5yb3VuZCwKCQlQQVJTRUlOVCA9IHBhcnNlSW50OwoJCQoJRXh0LmxpYi5Eb20gPSB7CgkgICAgaXNBbmNlc3RvciA6IGZ1bmN0aW9uKHAsIGMpIHsKCQkgICAgdmFyIHJldCA9IGZhbHNlOwoJCQkKCQkJcCA9IEV4dC5nZXREb20ocCk7CgkJCWMgPSBFeHQuZ2V0RG9tKGMpOwoJCQlpZiAocCAmJiBjKSB7CgkJCQlpZiAocC5jb250YWlucykgewoJCQkJCXJldHVybiBwLmNvbnRhaW5zKGMpOwoJCQkJfSBlbHNlIGlmIChwLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7CgkJCQkJcmV0dXJuICEhKHAuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYykgJiAxNik7CgkJCQl9IGVsc2UgewoJCQkJCXdoaWxlIChjID0gYy5wYXJlbnROb2RlKSB7CgkJCQkJCXJldCA9IGMgPT0gcCB8fCByZXQ7CSAgICAgICAgCQkJCgkJCQkJfQoJCQkJfQkgICAgICAgICAgICAKCQkJfQkKCQkJcmV0dXJuIHJldDsKCQl9LAoJCQogICAgICAgIGdldFZpZXdXaWR0aCA6IGZ1bmN0aW9uKGZ1bGwpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bGwgPyB0aGlzLmdldERvY3VtZW50V2lkdGgoKSA6IHRoaXMuZ2V0Vmlld3BvcnRXaWR0aCgpOwogICAgICAgIH0sCgogICAgICAgIGdldFZpZXdIZWlnaHQgOiBmdW5jdGlvbihmdWxsKSB7CiAgICAgICAgICAgIHJldHVybiBmdWxsID8gdGhpcy5nZXREb2N1bWVudEhlaWdodCgpIDogdGhpcy5nZXRWaWV3cG9ydEhlaWdodCgpOwogICAgICAgIH0sCgogICAgICAgIGdldERvY3VtZW50SGVpZ2h0OiBmdW5jdGlvbigpIHsgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIE1BWCghaXNDU1MxID8gZG9jLmJvZHkuc2Nyb2xsSGVpZ2h0IDogZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQsIHRoaXMuZ2V0Vmlld3BvcnRIZWlnaHQoKSk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0RG9jdW1lbnRXaWR0aDogZnVuY3Rpb24oKSB7ICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBNQVgoIWlzQ1NTMSA/IGRvYy5ib2R5LnNjcm9sbFdpZHRoIDogZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCwgdGhpcy5nZXRWaWV3cG9ydFdpZHRoKCkpOwogICAgICAgIH0sCgogICAgICAgIGdldFZpZXdwb3J0SGVpZ2h0OiBmdW5jdGlvbigpewoJICAgICAgICByZXR1cm4gRXh0LmlzSUUgPyAKCSAgICAgICAgCSAgIChFeHQuaXNTdHJpY3QgPyBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IGRvYy5ib2R5LmNsaWVudEhlaWdodCkgOgoJICAgICAgICAJICAgc2VsZi5pbm5lckhlaWdodDsKICAgICAgICB9LAoKICAgICAgICBnZXRWaWV3cG9ydFdpZHRoIDogZnVuY3Rpb24oKSB7CgkgICAgICAgIHJldHVybiAhRXh0LmlzU3RyaWN0ICYmICFFeHQuaXNPcGVyYSA/IGRvYy5ib2R5LmNsaWVudFdpZHRoIDoKCSAgICAgICAgCSAgIEV4dC5pc0lFID8gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA6IHNlbGYuaW5uZXJXaWR0aDsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIGdldFkgOiBmdW5jdGlvbihlbCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRYWShlbClbMV07CiAgICAgICAgfSwKCiAgICAgICAgZ2V0WCA6IGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFhZKGVsKVswXTsKICAgICAgICB9LAoKICAgICAgICBnZXRYWSA6IGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgICAgIHZhciBwLCAKICAgICAgICAgICAgCXBlLCAKICAgICAgICAgICAgCWIsCiAgICAgICAgICAgIAlidCwgCiAgICAgICAgICAgIAlibCwgICAgIAogICAgICAgICAgICAJZGJkLCAgICAgICAJCiAgICAgICAgICAgIAl4ID0gMCwKICAgICAgICAgICAgCXkgPSAwLCAKICAgICAgICAgICAgCXNjcm9sbCwKICAgICAgICAgICAgCWhhc0Fic29sdXRlLCAKICAgICAgICAgICAgCWJkID0gKGRvYy5ib2R5IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQpLAogICAgICAgICAgICAJcmV0ID0gWzAsMF07CiAgICAgICAgICAgIAkKICAgICAgICAgICAgZWwgPSBFeHQuZ2V0RG9tKGVsKTsKCiAgICAgICAgICAgIGlmKGVsICE9IGJkKXsKCSAgICAgICAgICAgIGlmIChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHsKCSAgICAgICAgICAgICAgICBiID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgkgICAgICAgICAgICAgICAgc2Nyb2xsID0gZmx5KGRvY3VtZW50KS5nZXRTY3JvbGwoKTsKCSAgICAgICAgICAgICAgICByZXQgPSBbUk9VTkQoYi5sZWZ0ICsgc2Nyb2xsLmxlZnQpLCBST1VORChiLnRvcCArIHNjcm9sbC50b3ApXTsKCSAgICAgICAgICAgIH0gZWxzZSB7ICAKCQkgICAgICAgICAgICBwID0gZWw7CQkKCQkgICAgICAgICAgICBoYXNBYnNvbHV0ZSA9IGZseShlbCkuaXNTdHlsZSgicG9zaXRpb24iLCAiYWJzb2x1dGUiKTsKCQkKCQkgICAgICAgICAgICB3aGlsZSAocCkgewoJCQkgICAgICAgICAgICBwZSA9IGZseShwKTsJCQoJCSAgICAgICAgICAgICAgICB4ICs9IHAub2Zmc2V0TGVmdDsKCQkgICAgICAgICAgICAgICAgeSArPSBwLm9mZnNldFRvcDsKCQkKCQkgICAgICAgICAgICAgICAgaGFzQWJzb2x1dGUgPSBoYXNBYnNvbHV0ZSB8fCBwZS5pc1N0eWxlKCJwb3NpdGlvbiIsICJhYnNvbHV0ZSIpOwoJCSAgICAgICAgICAgICAgICAJCQoJCSAgICAgICAgICAgICAgICBpZiAoRXh0LmlzR2Vja28pIHsJCSAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICB5ICs9IGJ0ID0gUEFSU0VJTlQocGUuZ2V0U3R5bGUoImJvcmRlclRvcFdpZHRoIiksIDEwKSB8fCAwOwoJCSAgICAgICAgICAgICAgICAgICAgeCArPSBibCA9IFBBUlNFSU5UKHBlLmdldFN0eWxlKCJib3JkZXJMZWZ0V2lkdGgiKSwgMTApIHx8IDA7CQoJCQoJCSAgICAgICAgICAgICAgICAgICAgaWYgKHAgIT0gZWwgJiYgIXBlLmlzU3R5bGUoJ292ZXJmbG93JywndmlzaWJsZScpKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBibDsKCQkgICAgICAgICAgICAgICAgICAgICAgICB5ICs9IGJ0OwoJCSAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIHAgPSBwLm9mZnNldFBhcmVudDsKCQkgICAgICAgICAgICB9CgkJCgkJICAgICAgICAgICAgaWYgKEV4dC5pc1NhZmFyaSAmJiBoYXNBYnNvbHV0ZSkgewoJCSAgICAgICAgICAgICAgICB4IC09IGJkLm9mZnNldExlZnQ7CgkJICAgICAgICAgICAgICAgIHkgLT0gYmQub2Zmc2V0VG9wOwoJCSAgICAgICAgICAgIH0KCQkKCQkgICAgICAgICAgICBpZiAoRXh0LmlzR2Vja28gJiYgIWhhc0Fic29sdXRlKSB7CgkJICAgICAgICAgICAgICAgIGRiZCA9IGZseShiZCk7CgkJICAgICAgICAgICAgICAgIHggKz0gUEFSU0VJTlQoZGJkLmdldFN0eWxlKCJib3JkZXJMZWZ0V2lkdGgiKSwgMTApIHx8IDA7CgkJICAgICAgICAgICAgICAgIHkgKz0gUEFSU0VJTlQoZGJkLmdldFN0eWxlKCJib3JkZXJUb3BXaWR0aCIpLCAxMCkgfHwgMDsKCQkgICAgICAgICAgICB9CgkJCgkJICAgICAgICAgICAgcCA9IGVsLnBhcmVudE5vZGU7CgkJICAgICAgICAgICAgd2hpbGUgKHAgJiYgcCAhPSBiZCkgewoJCSAgICAgICAgICAgICAgICBpZiAoIUV4dC5pc09wZXJhIHx8IChwLnRhZ05hbWUgIT0gJ1RSJyAmJiAhZmx5KHApLmlzU3R5bGUoImRpc3BsYXkiLCAiaW5saW5lIikpKSB7CgkJICAgICAgICAgICAgICAgICAgICB4IC09IHAuc2Nyb2xsTGVmdDsKCQkgICAgICAgICAgICAgICAgICAgIHkgLT0gcC5zY3JvbGxUb3A7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgcCA9IHAucGFyZW50Tm9kZTsKCQkgICAgICAgICAgICB9CgkJICAgICAgICAgICAgcmV0ID0gW3gseV07CgkgICAgICAgICAgICB9CiAgICAgICAgIAl9CiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSwKCiAgICAgICAgc2V0WFkgOiBmdW5jdGlvbihlbCwgeHkpIHsKICAgICAgICAgICAgKGVsID0gRXh0LmZseShlbCwgJ19zZXRYWScpKS5wb3NpdGlvbigpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHB0cyA9IGVsLnRyYW5zbGF0ZVBvaW50cyh4eSksCiAgICAgICAgICAgIAlzdHlsZSA9IGVsLmRvbS5zdHlsZSwKICAgICAgICAgICAgCXBvczsgICAgICAgICAgICAJCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgKHBvcyBpbiBwdHMpIHsJICAgICAgICAgICAgCgkgICAgICAgICAgICBpZiAoIWlzTmFOKHB0c1twb3NdKSkgewoJICAgICAgICAgICAgICAgIHN0eWxlW3Bvc10gPSBwdHNbcG9zXSArICJweCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBzZXRYIDogZnVuY3Rpb24oZWwsIHgpIHsKICAgICAgICAgICAgdGhpcy5zZXRYWShlbCwgW3gsIGZhbHNlXSk7CiAgICAgICAgfSwKCiAgICAgICAgc2V0WSA6IGZ1bmN0aW9uKGVsLCB5KSB7CiAgICAgICAgICAgIHRoaXMuc2V0WFkoZWwsIFtmYWxzZSwgeV0pOwogICAgICAgIH0KICAgIH07Cn0pKCk7RXh0LmxpYi5FdmVudCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGxvYWRDb21wbGV0ZSA9IGZhbHNlLAogICAgICAgIHVubG9hZExpc3RlbmVycyA9IHt9LAogICAgICAgIHJldHJ5Q291bnQgPSAwLAogICAgICAgIG9uQXZhaWxTdGFjayA9IFtdLAogICAgICAgIF9pbnRlcnZhbCwKICAgICAgICBsb2NrZWQgPSBmYWxzZSwKICAgICAgICB3aW4gPSB3aW5kb3csCiAgICAgICAgZG9jID0gZG9jdW1lbnQsCgogICAgICAgIC8vIGNvbnN0YW50cwogICAgICAgIFBPTExfUkVUUllTID0gMjAwLAogICAgICAgIFBPTExfSU5URVJWQUwgPSAyMCwKICAgICAgICBUWVBFID0gMCwKICAgICAgICBGTiA9IDEsCiAgICAgICAgT0JKID0gMiwKICAgICAgICBBREpfU0NPUEUgPSAzLAogICAgICAgIFNDUk9MTExFRlQgPSAnc2Nyb2xsTGVmdCcsCiAgICAgICAgU0NST0xMVE9QID0gJ3Njcm9sbFRvcCcsCiAgICAgICAgVU5MT0FEID0gJ3VubG9hZCcsCiAgICAgICAgTU9VU0VPVkVSID0gJ21vdXNlb3ZlcicsCiAgICAgICAgTU9VU0VPVVQgPSAnbW91c2VvdXQnLAogICAgICAgIC8vIHByaXZhdGUKICAgICAgICBkb0FkZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcmV0OwogICAgICAgICAgICBpZiAod2luLmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIHJldCA9IGZ1bmN0aW9uKGVsLCBldmVudE5hbWUsIGZuLCBjYXB0dXJlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PSAnbW91c2VlbnRlcicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBmbi5jcmVhdGVJbnRlcmNlcHRvcihjaGVja1JlbGF0ZWRUYXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKE1PVVNFT1ZFUiwgZm4sIChjYXB0dXJlKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudE5hbWUgPT0gJ21vdXNlbGVhdmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gZm4uY3JlYXRlSW50ZXJjZXB0b3IoY2hlY2tSZWxhdGVkVGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihNT1VTRU9VVCwgZm4sIChjYXB0dXJlKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuLCAoY2FwdHVyZSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm47CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgaWYgKHdpbi5hdHRhY2hFdmVudCkgewogICAgICAgICAgICAgICAgcmV0ID0gZnVuY3Rpb24oZWwsIGV2ZW50TmFtZSwgZm4sIGNhcHR1cmUpIHsKICAgICAgICAgICAgICAgICAgICBlbC5hdHRhY2hFdmVudCgib24iICsgZXZlbnROYW1lLCBmbik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldCA9IGZ1bmN0aW9uKCl7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH0oKSwKICAgICAgICAvLyBwcml2YXRlCiAgICAgICAgZG9SZW1vdmUgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmV0OwogICAgICAgICAgICBpZiAod2luLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIHJldCA9IGZ1bmN0aW9uIChlbCwgZXZlbnROYW1lLCBmbiwgY2FwdHVyZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT0gJ21vdXNlZW50ZXInKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IE1PVVNFT1ZFUjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZSA9PSAnbW91c2VsZWF2ZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gTU9VU0VPVVQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgKGNhcHR1cmUpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luLmRldGFjaEV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXQgPSBmdW5jdGlvbiAoZWwsIGV2ZW50TmFtZSwgZm4pIHsKICAgICAgICAgICAgICAgICAgICBlbC5kZXRhY2hFdmVudCgib24iICsgZXZlbnROYW1lLCBmbik7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0ID0gZnVuY3Rpb24oKXt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSgpOwoKICAgIGZ1bmN0aW9uIGNoZWNrUmVsYXRlZFRhcmdldChlKSB7CiAgICAgICAgcmV0dXJuICFlbENvbnRhaW5zKGUuY3VycmVudFRhcmdldCwgcHViLmdldFJlbGF0ZWRUYXJnZXQoZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVsQ29udGFpbnMocGFyZW50LCBjaGlsZCkgewogICAgICAgaWYocGFyZW50ICYmIHBhcmVudC5maXJzdENoaWxkKXsKICAgICAgICAgd2hpbGUoY2hpbGQpIHsKICAgICAgICAgICAgaWYoY2hpbGQgPT09IHBhcmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlOwogICAgICAgICAgICBpZihjaGlsZCAmJiAoY2hpbGQubm9kZVR5cGUgIT0gMSkpIHsKICAgICAgICAgICAgICAgIGNoaWxkID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gX3RyeVByZWxvYWRBdHRhY2goKSB7CiAgICAgICAgdmFyIHJldCA9IGZhbHNlLAogICAgICAgICAgICBub3RBdmFpbCA9IFtdLAogICAgICAgICAgICBlbGVtZW50LCBpLCB2LCBvdmVycmlkZSwKICAgICAgICAgICAgdHJ5QWdhaW4gPSAhbG9hZENvbXBsZXRlIHx8IChyZXRyeUNvdW50ID4gMCk7CgogICAgICAgIGlmKCFsb2NrZWQpewogICAgICAgICAgICBsb2NrZWQgPSB0cnVlOwogICAgICAgICAgICAKICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgb25BdmFpbFN0YWNrLmxlbmd0aDsgKytpKXsKICAgICAgICAgICAgICAgIHYgPSBvbkF2YWlsU3RhY2tbaV07CiAgICAgICAgICAgICAgICBpZih2ICYmIChlbGVtZW50ID0gZG9jLmdldEVsZW1lbnRCeUlkKHYuaWQpKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoIXYuY2hlY2tSZWFkeSB8fCBsb2FkQ29tcGxldGUgfHwgZWxlbWVudC5uZXh0U2libGluZyB8fCAoZG9jICYmIGRvYy5ib2R5KSkgewogICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZSA9IHYub3ZlcnJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBvdmVycmlkZSA/IChvdmVycmlkZSA9PT0gdHJ1ZSA/IHYub2JqIDogb3ZlcnJpZGUpIDogZWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgdi5mbi5jYWxsKGVsZW1lbnQsIHYub2JqKTsKICAgICAgICAgICAgICAgICAgICAgICAgb25BdmFpbFN0YWNrLnJlbW92ZSh2KTsKICAgICAgICAgICAgICAgICAgICAgICAgLS1pOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBub3RBdmFpbC5wdXNoKHYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0cnlDb3VudCA9IChub3RBdmFpbC5sZW5ndGggPT09IDApID8gMCA6IHJldHJ5Q291bnQgLSAxOwoKICAgICAgICAgICAgaWYgKHRyeUFnYWluKSB7CiAgICAgICAgICAgICAgICBzdGFydEludGVydmFsKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKF9pbnRlcnZhbCk7CiAgICAgICAgICAgICAgICBfaW50ZXJ2YWwgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldCA9ICEobG9ja2VkID0gZmFsc2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIC8vIHByaXZhdGUKICAgIGZ1bmN0aW9uIHN0YXJ0SW50ZXJ2YWwoKSB7CiAgICAgICAgaWYoIV9pbnRlcnZhbCl7CiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgX3RyeVByZWxvYWRBdHRhY2goKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIFBPTExfSU5URVJWQUwpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBwcml2YXRlCiAgICBmdW5jdGlvbiBnZXRTY3JvbGwoKSB7CiAgICAgICAgdmFyIGRkID0gZG9jLmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgZGIgPSBkb2MuYm9keTsKICAgICAgICBpZihkZCAmJiAoZGRbU0NST0xMVE9QXSB8fCBkZFtTQ1JPTExMRUZUXSkpewogICAgICAgICAgICByZXR1cm4gW2RkW1NDUk9MTExFRlRdLCBkZFtTQ1JPTExUT1BdXTsKICAgICAgICB9ZWxzZSBpZihkYil7CiAgICAgICAgICAgIHJldHVybiBbZGJbU0NST0xMTEVGVF0sIGRiW1NDUk9MTFRPUF1dOwogICAgICAgIH1lbHNlewogICAgICAgICAgICByZXR1cm4gWzAsIDBdOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBwcml2YXRlCiAgICBmdW5jdGlvbiBnZXRQYWdlQ29vcmQgKGV2LCB4eSkgewogICAgICAgIGV2ID0gZXYuYnJvd3NlckV2ZW50IHx8IGV2OwogICAgICAgIHZhciBjb29yZCAgPSBldlsncGFnZScgKyB4eV07CiAgICAgICAgaWYgKCFjb29yZCAmJiBjb29yZCAhPT0gMCkgewogICAgICAgICAgICBjb29yZCA9IGV2WydjbGllbnQnICsgeHldIHx8IDA7CgogICAgICAgICAgICBpZiAoRXh0LmlzSUUpIHsKICAgICAgICAgICAgICAgIGNvb3JkICs9IGdldFNjcm9sbCgpW3h5ID09ICJYIiA/IDAgOiAxXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNvb3JkOwogICAgfQoKICAgIHZhciBwdWIgPSAgewogICAgICAgIGV4dEFkYXB0ZXI6IHRydWUsCiAgICAgICAgb25BdmFpbGFibGUgOiBmdW5jdGlvbihwX2lkLCBwX2ZuLCBwX29iaiwgcF9vdmVycmlkZSkgewogICAgICAgICAgICBvbkF2YWlsU3RhY2sucHVzaCh7CiAgICAgICAgICAgICAgICBpZDogICAgICAgICBwX2lkLAogICAgICAgICAgICAgICAgZm46ICAgICAgICAgcF9mbiwKICAgICAgICAgICAgICAgIG9iajogICAgICAgIHBfb2JqLAogICAgICAgICAgICAgICAgb3ZlcnJpZGU6ICAgcF9vdmVycmlkZSwKICAgICAgICAgICAgICAgIGNoZWNrUmVhZHk6IGZhbHNlIH0pOwoKICAgICAgICAgICAgcmV0cnlDb3VudCA9IFBPTExfUkVUUllTOwogICAgICAgICAgICBzdGFydEludGVydmFsKCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgQUxXQVlTIGJlIGNhbGxlZCBmcm9tIEV4dC5FdmVudE1hbmFnZXIKICAgICAgICBhZGRMaXN0ZW5lcjogZnVuY3Rpb24oZWwsIGV2ZW50TmFtZSwgZm4pIHsKICAgICAgICAgICAgZWwgPSBFeHQuZ2V0RG9tKGVsKTsKICAgICAgICAgICAgaWYgKGVsICYmIGZuKSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09IFVOTE9BRCkgewogICAgICAgICAgICAgICAgICAgIGlmICh1bmxvYWRMaXN0ZW5lcnNbZWwuaWRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2FkTGlzdGVuZXJzW2VsLmlkXSA9IFtdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB1bmxvYWRMaXN0ZW5lcnNbZWwuaWRdLnB1c2goW2V2ZW50TmFtZSwgZm5dKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZG9BZGQoZWwsIGV2ZW50TmFtZSwgZm4sIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgQUxXQVlTIGJlIGNhbGxlZCBmcm9tIEV4dC5FdmVudE1hbmFnZXIKICAgICAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24oZWwsIGV2ZW50TmFtZSwgZm4pIHsKICAgICAgICAgICAgZWwgPSBFeHQuZ2V0RG9tKGVsKTsKICAgICAgICAgICAgdmFyIGksIGxlbiwgbGksIGxpczsKICAgICAgICAgICAgaWYgKGVsICYmIGZuKSB7CiAgICAgICAgICAgICAgICBpZihldmVudE5hbWUgPT0gVU5MT0FEKXsKICAgICAgICAgICAgICAgICAgICBpZigobGlzID0gdW5sb2FkTGlzdGVuZXJzW2VsLmlkXSkgIT09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpID0gMCwgbGVuID0gbGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChsaSA9IGxpc1tpXSkgJiYgbGlbVFlQRV0gPT0gZXZlbnROYW1lICYmIGxpW0ZOXSA9PSBmbil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2FkTGlzdGVuZXJzW2VsLmlkXS5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZG9SZW1vdmUoZWwsIGV2ZW50TmFtZSwgZm4sIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldFRhcmdldCA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIGV2ID0gZXYuYnJvd3NlckV2ZW50IHx8IGV2OwogICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlVGV4dE5vZGUoZXYudGFyZ2V0IHx8IGV2LnNyY0VsZW1lbnQpOwogICAgICAgIH0sCgogICAgICAgIHJlc29sdmVUZXh0Tm9kZSA6IEV4dC5pc0dlY2tvID8gZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgIGlmKCFub2RlKXsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCBmaXJlZm94IGJ1ZywgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAxMTk3CiAgICAgICAgICAgIHZhciBzID0gSFRNTEVsZW1lbnQucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobm9kZSk7CiAgICAgICAgICAgIGlmKHMgPT0gJ1t4cGNvbm5lY3Qgd3JhcHBlZCBuYXRpdmUgcHJvdG90eXBlXScgfHwgcyA9PSAnW29iamVjdCBYVUxFbGVtZW50XScpewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDMgPyBub2RlLnBhcmVudE5vZGUgOiBub2RlOwogICAgICAgIH0gOiBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PSAzID8gbm9kZS5wYXJlbnROb2RlIDogbm9kZTsKICAgICAgICB9LAoKICAgICAgICBnZXRSZWxhdGVkVGFyZ2V0IDogZnVuY3Rpb24oZXYpIHsKICAgICAgICAgICAgZXYgPSBldi5icm93c2VyRXZlbnQgfHwgZXY7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVUZXh0Tm9kZShldi5yZWxhdGVkVGFyZ2V0IHx8CiAgICAgICAgICAgICAgICAoLyhtb3VzZW91dHxtb3VzZWxlYXZlKS8udGVzdChldi50eXBlKSA/IGV2LnRvRWxlbWVudCA6CiAgICAgICAgICAgICAgICAgLyhtb3VzZW92ZXJ8bW91c2VlbnRlcikvLnRlc3QoZXYudHlwZSkgPyBldi5mcm9tRWxlbWVudCA6IG51bGwpKTsKICAgICAgICB9LAoKICAgICAgICBnZXRQYWdlWCA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIHJldHVybiBnZXRQYWdlQ29vcmQoZXYsICJYIik7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0UGFnZVkgOiBmdW5jdGlvbihldikgewogICAgICAgICAgICByZXR1cm4gZ2V0UGFnZUNvb3JkKGV2LCAiWSIpOwogICAgICAgIH0sCgoKICAgICAgICBnZXRYWSA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIHJldHVybiBbdGhpcy5nZXRQYWdlWChldiksIHRoaXMuZ2V0UGFnZVkoZXYpXTsKICAgICAgICB9LAoKICAgICAgICBzdG9wRXZlbnQgOiBmdW5jdGlvbihldikgewogICAgICAgICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbihldik7CiAgICAgICAgICAgIHRoaXMucHJldmVudERlZmF1bHQoZXYpOwogICAgICAgIH0sCgogICAgICAgIHN0b3BQcm9wYWdhdGlvbiA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIGV2ID0gZXYuYnJvd3NlckV2ZW50IHx8IGV2OwogICAgICAgICAgICBpZiAoZXYuc3RvcFByb3BhZ2F0aW9uKSB7CiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGV2LmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBwcmV2ZW50RGVmYXVsdCA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIGV2ID0gZXYuYnJvd3NlckV2ZW50IHx8IGV2OwogICAgICAgICAgICBpZiAoZXYucHJldmVudERlZmF1bHQpIHsKICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoZXYua2V5Q29kZSkgewogICAgICAgICAgICAgICAgICAgIGV2LmtleUNvZGUgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXYucmV0dXJuVmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldEV2ZW50IDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBlID0gZSB8fCB3aW4uZXZlbnQ7CiAgICAgICAgICAgIGlmICghZSkgewogICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldEV2ZW50LmNhbGxlcjsKICAgICAgICAgICAgICAgIHdoaWxlIChjKSB7CiAgICAgICAgICAgICAgICAgICAgZSA9IGMuYXJndW1lbnRzWzBdOwogICAgICAgICAgICAgICAgICAgIGlmIChlICYmIEV2ZW50ID09IGUuY29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGMgPSBjLmNhbGxlcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICB9LAoKICAgICAgICBnZXRDaGFyQ29kZSA6IGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIGV2ID0gZXYuYnJvd3NlckV2ZW50IHx8IGV2OwogICAgICAgICAgICByZXR1cm4gZXYuY2hhckNvZGUgfHwgZXYua2V5Q29kZSB8fCAwOwogICAgICAgIH0sCgogICAgICAgIC8vY2xlYXJDYWNoZTogZnVuY3Rpb24oKSB7fSwKICAgICAgICAvLyBkZXByZWNhdGVkLCBjYWxsIGZyb20gRXZlbnRNYW5hZ2VyCiAgICAgICAgZ2V0TGlzdGVuZXJzIDogZnVuY3Rpb24oZWwsIGV2ZW50TmFtZSkgewogICAgICAgICAgICBFeHQuRXZlbnRNYW5hZ2VyLmdldExpc3RlbmVycyhlbCwgZXZlbnROYW1lKTsKICAgICAgICB9LAoKICAgICAgICAvLyBkZXByZWNhdGVkLCBjYWxsIGZyb20gRXZlbnRNYW5hZ2VyCiAgICAgICAgcHVyZ2VFbGVtZW50IDogZnVuY3Rpb24oZWwsIHJlY3Vyc2UsIGV2ZW50TmFtZSkgewogICAgICAgICAgICBFeHQuRXZlbnRNYW5hZ2VyLnB1cmdlRWxlbWVudChlbCwgcmVjdXJzZSwgZXZlbnROYW1lKTsKICAgICAgICB9LAoKICAgICAgICBfbG9hZCA6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgbG9hZENvbXBsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChFeHQuaXNJRSAmJiBlICE9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAvLyBJRTggY29tcGxhaW5zIHRoYXQgX2xvYWQgaXMgbnVsbCBvciBub3QgYW4gb2JqZWN0CiAgICAgICAgICAgICAgICAvLyBzbyBsZXRzIHJlbW92ZSBzZWxmIHZpYSBhcmd1bWVudHMuY2FsbGVlCiAgICAgICAgICAgICAgICBkb1JlbW92ZSh3aW4sICJsb2FkIiwgYXJndW1lbnRzLmNhbGxlZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfdW5sb2FkIDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgdmFyIEVVID0gRXh0LmxpYi5FdmVudCwKICAgICAgICAgICAgICAgIGksIHYsIHVsLCBpZCwgbGVuLCBzY29wZTsKCiAgICAgICAgICAgIGZvciAoaWQgaW4gdW5sb2FkTGlzdGVuZXJzKSB7CiAgICAgICAgICAgICAgICB1bCA9IHVubG9hZExpc3RlbmVyc1tpZF07CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB1bC5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgICAgIHYgPSB1bFtpXTsKICAgICAgICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSA9IHZbQURKX1NDT1BFXSA/ICh2W0FESl9TQ09QRV0gPT09IHRydWUgPyB2W09CSl0gOiB2W0FESl9TQ09QRV0pIDogIHdpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZbRk5dLmNhbGwoc2NvcGUsIEVVLmdldEV2ZW50KGUpLCB2W09CSl0pOwogICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpe30KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBFeHQuRXZlbnRNYW5hZ2VyLl91bmxvYWQoKTsKCiAgICAgICAgICAgIGRvUmVtb3ZlKHdpbiwgVU5MT0FELCBFVS5fdW5sb2FkKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIEluaXRpYWxpemUgc3R1ZmYuCiAgICBwdWIub24gPSBwdWIuYWRkTGlzdGVuZXI7CiAgICBwdWIudW4gPSBwdWIucmVtb3ZlTGlzdGVuZXI7CiAgICBpZiAoZG9jICYmIGRvYy5ib2R5KSB7CiAgICAgICAgcHViLl9sb2FkKHRydWUpOwogICAgfSBlbHNlIHsKICAgICAgICBkb0FkZCh3aW4sICJsb2FkIiwgcHViLl9sb2FkKTsKICAgIH0KICAgIGRvQWRkKHdpbiwgVU5MT0FELCBwdWIuX3VubG9hZCk7CiAgICBfdHJ5UHJlbG9hZEF0dGFjaCgpOwoKICAgIHJldHVybiBwdWI7Cn0oKTsKLyoKKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIHBpZWNlcyBvZiBZYWhvbyBVc2VyIEludGVyZmFjZSBMaWJyYXJ5CiogQ29weXJpZ2h0IChjKSAyMDA3LCBZYWhvbyEgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoqIFlVSSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6CiogaHR0cDovL2RldmVsb3Blci55YWhvby5uZXQveXVpL2xpY2Vuc2UudHh0CiovCkV4dC5saWIuQWpheCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGFjdGl2ZVggPSBbJ01zeG1sMi5YTUxIVFRQLjYuMCcsCiAgICAgICAgICAgICAgICAgICAnTXN4bWwyLlhNTEhUVFAuMy4wJywKICAgICAgICAgICAgICAgICAgICdNc3htbDIuWE1MSFRUUCddLAogICAgICAgIENPTlRFTlRUWVBFID0gJ0NvbnRlbnQtVHlwZSc7CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gc2V0SGVhZGVyKG8pIHsKICAgICAgICB2YXIgY29ubiA9IG8uY29ubiwKICAgICAgICAgICAgcHJvcCwKICAgICAgICAgICAgaGVhZGVycyA9IHt9OwoKICAgICAgICBmdW5jdGlvbiBzZXRUaGVIZWFkZXJzKGNvbm4sIGhlYWRlcnMpewogICAgICAgICAgICBmb3IgKHByb3AgaW4gaGVhZGVycykgewogICAgICAgICAgICAgICAgaWYgKGhlYWRlcnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHsKICAgICAgICAgICAgICAgICAgICBjb25uLnNldFJlcXVlc3RIZWFkZXIocHJvcCwgaGVhZGVyc1twcm9wXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEV4dC5hcHBseShoZWFkZXJzLCBwdWIuaGVhZGVycywgcHViLmRlZmF1bHRIZWFkZXJzKTsKICAgICAgICBzZXRUaGVIZWFkZXJzKGNvbm4sIGhlYWRlcnMpOwogICAgICAgIGRlbGV0ZSBwdWIuaGVhZGVyczsKICAgIH0KCiAgICAvLyBwcml2YXRlCiAgICBmdW5jdGlvbiBjcmVhdGVFeGNlcHRpb25PYmplY3QodElkLCBjYWxsYmFja0FyZywgaXNBYm9ydCwgaXNUaW1lb3V0LCBodHRwU3RhdHVzKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdElkIDogdElkLAogICAgICAgICAgICBzdGF0dXMgOiBpc0Fib3J0ID8gLTEgOiAwLAogICAgICAgICAgICBzdGF0dXNUZXh0IDogaXNBYm9ydCA/ICd0cmFuc2FjdGlvbiBhYm9ydGVkJyA6ICgnY29tbXVuaWNhdGlvbiBmYWlsdXJlLCBodHRwU3RhdHVzPScgKyBodHRwU3RhdHVzKSwKICAgICAgICAgICAgaXNBYm9ydDogaXNBYm9ydCwKICAgICAgICAgICAgaXNUaW1lb3V0OiBpc1RpbWVvdXQsCiAgICAgICAgICAgIGFyZ3VtZW50IDogY2FsbGJhY2tBcmcKICAgICAgICB9OwogICAgfQoKICAgIC8vIHByaXZhdGUKICAgIGZ1bmN0aW9uIGluaXRIZWFkZXIobGFiZWwsIHZhbHVlKSB7CiAgICAgICAgKHB1Yi5oZWFkZXJzID0gcHViLmhlYWRlcnMgfHwge30pW2xhYmVsXSA9IHZhbHVlOwogICAgfQoKICAgIC8vIHByaXZhdGUKICAgIGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlT2JqZWN0KG8sIGNhbGxiYWNrQXJnKSB7CiAgICAgICAgdmFyIGhlYWRlck9iaiA9IHt9LAogICAgICAgICAgICBoZWFkZXJTdHIsCiAgICAgICAgICAgIGNvbm4gPSBvLmNvbm4sCiAgICAgICAgICAgIHQsCiAgICAgICAgICAgIHMsCiAgICAgICAgICAgIC8vIHNlZTogaHR0cHM6Ly9wcm90b3R5cGUubGlnaHRob3VzZWFwcC5jb20vcHJvamVjdHMvODg4Ni90aWNrZXRzLzEyOS1pZS1tYW5nbGVzLWh0dHAtcmVzcG9uc2Utc3RhdHVzLWNvZGUtMjA0LXRvLTEyMjMKICAgICAgICAgICAgaXNCcm9rZW5TdGF0dXMgPSBjb25uLnN0YXR1cyA9PSAxMjIzOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBoZWFkZXJTdHIgPSBvLmNvbm4uZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7CiAgICAgICAgICAgIEV4dC5lYWNoKGhlYWRlclN0ci5yZXBsYWNlKC9cclxuL2csICdcbicpLnNwbGl0KCdcbicpLCBmdW5jdGlvbih2KXsKICAgICAgICAgICAgICAgIHQgPSB2LmluZGV4T2YoJzonKTsKICAgICAgICAgICAgICAgIGlmKHQgPj0gMCl7CiAgICAgICAgICAgICAgICAgICAgcyA9IHYuc3Vic3RyKDAsIHQpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYodi5jaGFyQXQodCArIDEpID09ICcgJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICsrdDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyT2JqW3NdID0gdi5zdWJzdHIodCArIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoKGUpIHt9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRJZCA6IG8udElkLAogICAgICAgICAgICAvLyBOb3JtYWxpemUgdGhlIHN0YXR1cyBhbmQgc3RhdHVzVGV4dCB3aGVuIElFIHJldHVybnMgMTIyMywgc2VlIHRoZSBhYm92ZSBsaW5rLgogICAgICAgICAgICBzdGF0dXMgOiBpc0Jyb2tlblN0YXR1cyA/IDIwNCA6IGNvbm4uc3RhdHVzLAogICAgICAgICAgICBzdGF0dXNUZXh0IDogaXNCcm9rZW5TdGF0dXMgPyAnTm8gQ29udGVudCcgOiBjb25uLnN0YXR1c1RleHQsCiAgICAgICAgICAgIGdldFJlc3BvbnNlSGVhZGVyIDogZnVuY3Rpb24oaGVhZGVyKXtyZXR1cm4gaGVhZGVyT2JqW2hlYWRlci50b0xvd2VyQ2FzZSgpXTt9LAogICAgICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnMgOiBmdW5jdGlvbigpe3JldHVybiBoZWFkZXJTdHI7fSwKICAgICAgICAgICAgcmVzcG9uc2VUZXh0IDogY29ubi5yZXNwb25zZVRleHQsCiAgICAgICAgICAgIHJlc3BvbnNlWE1MIDogY29ubi5yZXNwb25zZVhNTCwKICAgICAgICAgICAgYXJndW1lbnQgOiBjYWxsYmFja0FyZwogICAgICAgIH07CiAgICB9CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gcmVsZWFzZU9iamVjdChvKSB7CiAgICAgICAgaWYgKG8udElkKSB7CiAgICAgICAgICAgIHB1Yi5jb25uW28udElkXSA9IG51bGw7CiAgICAgICAgfQogICAgICAgIG8uY29ubiA9IG51bGw7CiAgICAgICAgbyA9IG51bGw7CiAgICB9CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gaGFuZGxlVHJhbnNhY3Rpb25SZXNwb25zZShvLCBjYWxsYmFjaywgaXNBYm9ydCwgaXNUaW1lb3V0KSB7CiAgICAgICAgaWYgKCFjYWxsYmFjaykgewogICAgICAgICAgICByZWxlYXNlT2JqZWN0KG8pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgaHR0cFN0YXR1cywgcmVzcG9uc2VPYmplY3Q7CgogICAgICAgIHRyeSB7CiAgICAgICAgCWlmICghbykgewogICAgICAgIAkJaHR0cFN0YXR1cyA9IDEzMDMwNDsKICAgICAgICAJfSBlbHNlIGlmKCFvLmNvbm4pIHsKICAgICAgICAJCWh0dHBTdGF0dXMgPSAxMzAzMDU7CiAgICAgICAgCQkvL2RvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiMwMDAiOyAvLyB2aXN1YWxpemUgdGhlIGVycm9yIGluIHRoZSBJbnN1cmFuY2UgV2ViIEFwcAogICAgICAgIAkJcmV0dXJuOyAvLyBpZ25vcmUgdGhpcyBJRT8gZXJyb3IKICAgICAgICAJfSBlbHNlIGlmIChvLmNvbm4uc3RhdHVzICE9PSB1bmRlZmluZWQgJiYgby5jb25uLnN0YXR1cyAhPSAwKSB7CiAgICAgICAgICAgICAgICBodHRwU3RhdHVzID0gby5jb25uLnN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgCWlmIChvLmNvbm4uc3RhdHVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgCQlodHRwU3RhdHVzID0gMTMwMzAxOwkKICAgICAgICAgICAgCX0gZWxzZSB7CiAgICAgICAgICAgIAkJaHR0cFN0YXR1cyA9IDEzMDMwMzsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoKGUpIHsKICAgICAgICAgICAgaHR0cFN0YXR1cyA9IDEzMDMwMjsKICAgICAgICB9CgogICAgICAgIGlmICgoaHR0cFN0YXR1cyA+PSAyMDAgJiYgaHR0cFN0YXR1cyA8IDMwMCkgfHwgKEV4dC5pc0lFICYmIGh0dHBTdGF0dXMgPT0gMTIyMykpIHsKICAgICAgICAgICAgcmVzcG9uc2VPYmplY3QgPSBjcmVhdGVSZXNwb25zZU9iamVjdChvLCBjYWxsYmFjay5hcmd1bWVudCk7CiAgICAgICAgICAgIGlmIChjYWxsYmFjay5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrLnNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suc3VjY2VzcyhyZXNwb25zZU9iamVjdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5zdWNjZXNzLmFwcGx5KGNhbGxiYWNrLnNjb3BlLCBbcmVzcG9uc2VPYmplY3RdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgc3dpdGNoIChodHRwU3RhdHVzKSB7CiAgICAgICAgICAgICAgICBjYXNlIDEyMDAyOgogICAgICAgICAgICAgICAgY2FzZSAxMjAyOToKICAgICAgICAgICAgICAgIGNhc2UgMTIwMzA6CiAgICAgICAgICAgICAgICBjYXNlIDEyMDMxOgogICAgICAgICAgICAgICAgY2FzZSAxMjE1MjoKICAgICAgICAgICAgICAgIGNhc2UgMTMwMzA6CiAgICAgICAgICAgICAgICBjYXNlIDEzMDMwMToKICAgICAgICAgICAgICAgIGNhc2UgMTMwMzAyOgogICAgICAgICAgICAgICAgY2FzZSAxMzAzMDM6CiAgICAgICAgICAgICAgICBjYXNlIDEzMDMwNDoKICAgICAgICAgICAgICAgIGNhc2UgMTMwMzA1OgogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlT2JqZWN0ID0gY3JlYXRlRXhjZXB0aW9uT2JqZWN0KG8udElkLCBjYWxsYmFjay5hcmd1bWVudCwgKGlzQWJvcnQgPyBpc0Fib3J0IDogZmFsc2UpLCBpc1RpbWVvdXQsIGh0dHBTdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5mYWlsdXJlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2suc2NvcGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmZhaWx1cmUocmVzcG9uc2VPYmplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suZmFpbHVyZS5hcHBseShjYWxsYmFjay5zY29wZSwgW3Jlc3BvbnNlT2JqZWN0XSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlT2JqZWN0ID0gY3JlYXRlUmVzcG9uc2VPYmplY3QobywgY2FsbGJhY2suYXJndW1lbnQpOwogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5mYWlsdXJlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2suc2NvcGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmZhaWx1cmUocmVzcG9uc2VPYmplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suZmFpbHVyZS5hcHBseShjYWxsYmFjay5zY29wZSwgW3Jlc3BvbnNlT2JqZWN0XSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJlbGVhc2VPYmplY3Qobyk7CiAgICAgICAgcmVzcG9uc2VPYmplY3QgPSBudWxsOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGVja1Jlc3BvbnNlKG8sIGNhbGxiYWNrLCBjb25uLCB0SWQsIHBvbGwsIGNiVGltZW91dCl7CiAgICAgICAgaWYgKGNvbm4gJiYgY29ubi5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChwb2xsW3RJZF0pOwogICAgICAgICAgICBwb2xsW3RJZF0gPSBudWxsOwoKICAgICAgICAgICAgaWYgKGNiVGltZW91dCkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHB1Yi50aW1lb3V0W3RJZF0pOwogICAgICAgICAgICAgICAgcHViLnRpbWVvdXRbdElkXSA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGFuZGxlVHJhbnNhY3Rpb25SZXNwb25zZShvLCBjYWxsYmFjayk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGVja1RpbWVvdXQobywgY2FsbGJhY2spewogICAgICAgIHB1Yi5hYm9ydChvLCBjYWxsYmFjaywgdHJ1ZSk7CiAgICB9CiAgICAKCiAgICAvLyBwcml2YXRlCiAgICBmdW5jdGlvbiBoYW5kbGVSZWFkeVN0YXRlKG8sIGNhbGxiYWNrKXsKICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IHt9OwogICAgICAgIHZhciBjb25uID0gby5jb25uLAogICAgICAgICAgICB0SWQgPSBvLnRJZCwKICAgICAgICAgICAgcG9sbCA9IHB1Yi5wb2xsLAogICAgICAgICAgICBjYlRpbWVvdXQgPSBjYWxsYmFjay50aW1lb3V0IHx8IG51bGw7CgogICAgICAgIGlmIChjYlRpbWVvdXQpIHsKICAgICAgICAgICAgcHViLmNvbm5bdElkXSA9IGNvbm47CiAgICAgICAgICAgIHB1Yi50aW1lb3V0W3RJZF0gPSBzZXRUaW1lb3V0KGNoZWNrVGltZW91dC5jcmVhdGVDYWxsYmFjayhvLCBjYWxsYmFjayksIGNiVGltZW91dCk7CiAgICAgICAgfQogICAgICAgIHBvbGxbdElkXSA9IHNldEludGVydmFsKGNoZWNrUmVzcG9uc2UuY3JlYXRlQ2FsbGJhY2sobywgY2FsbGJhY2ssIGNvbm4sIHRJZCwgcG9sbCwgY2JUaW1lb3V0KSwgcHViLnBvbGxJbnRlcnZhbCk7CiAgICB9CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gYXN5bmNSZXF1ZXN0KG1ldGhvZCwgdXJpLCBjYWxsYmFjaywgcG9zdERhdGEpIHsKICAgICAgICB2YXIgbyA9IGdldENvbm5lY3Rpb25PYmplY3QoKSB8fCBudWxsOwoKICAgICAgICBpZiAobykgewogICAgICAgICAgICBvLmNvbm4ub3BlbihtZXRob2QsIHVyaSwgdHJ1ZSk7CgogICAgICAgICAgICBpZiAocHViLnVzZURlZmF1bHRYaHJIZWFkZXIpIHsKICAgICAgICAgICAgICAgIGluaXRIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCBwdWIuZGVmYXVsdFhockhlYWRlcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHBvc3REYXRhICYmIHB1Yi51c2VEZWZhdWx0SGVhZGVyICYmICghcHViLmhlYWRlcnMgfHwgIXB1Yi5oZWFkZXJzW0NPTlRFTlRUWVBFXSkpewogICAgICAgICAgICAgICAgaW5pdEhlYWRlcihDT05URU5UVFlQRSwgcHViLmRlZmF1bHRQb3N0SGVhZGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHB1Yi5kZWZhdWx0SGVhZGVycyB8fCBwdWIuaGVhZGVycykgewogICAgICAgICAgICAgICAgc2V0SGVhZGVyKG8pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoYW5kbGVSZWFkeVN0YXRlKG8sIGNhbGxiYWNrKTsKICAgICAgICAgICAgby5jb25uLnNlbmQocG9zdERhdGEgfHwgbnVsbCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBvOwogICAgfQoKICAgIC8vIHByaXZhdGUKICAgIGZ1bmN0aW9uIGdldENvbm5lY3Rpb25PYmplY3QoKSB7CiAgICAgICAgdmFyIG87CgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmIChvID0gY3JlYXRlWGhyT2JqZWN0KHB1Yi50cmFuc2FjdGlvbklkKSkgewogICAgICAgICAgICAgICAgcHViLnRyYW5zYWN0aW9uSWQrKzsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBwcml2YXRlCiAgICBmdW5jdGlvbiBjcmVhdGVYaHJPYmplY3QodHJhbnNhY3Rpb25JZCkgewogICAgICAgIHZhciBodHRwOwoKICAgICAgICB0cnkgewogICAgICAgICAgICBodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSBFeHQuaXNJRTYgPyAxIDogMDsgaSA8IGFjdGl2ZVgubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KGFjdGl2ZVhbaV0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgcmV0dXJuIHtjb25uIDogaHR0cCwgdElkIDogdHJhbnNhY3Rpb25JZH07CiAgICAgICAgfQogICAgfQoKICAgIHZhciBwdWIgPSB7CiAgICAgICAgcmVxdWVzdCA6IGZ1bmN0aW9uKG1ldGhvZCwgdXJpLCBjYiwgZGF0YSwgb3B0aW9ucykgewogICAgICAgICAgICBpZihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgeG1sRGF0YSA9IG9wdGlvbnMueG1sRGF0YSwKICAgICAgICAgICAgICAgICAgICBqc29uRGF0YSA9IG9wdGlvbnMuanNvbkRhdGEsCiAgICAgICAgICAgICAgICAgICAgaHM7CgogICAgICAgICAgICAgICAgRXh0LmFwcGx5SWYobWUsIG9wdGlvbnMpOwoKICAgICAgICAgICAgICAgIGlmKHhtbERhdGEgfHwganNvbkRhdGEpewogICAgICAgICAgICAgICAgICAgIGhzID0gbWUuaGVhZGVyczsKICAgICAgICAgICAgICAgICAgICBpZighaHMgfHwgIWhzW0NPTlRFTlRUWVBFXSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRIZWFkZXIoQ09OVEVOVFRZUEUsIHhtbERhdGEgPyAndGV4dC94bWwnIDogJ2FwcGxpY2F0aW9uL2pzb24nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHhtbERhdGEgfHwgKCFFeHQuaXNQcmltaXRpdmUoanNvbkRhdGEpID8gRXh0LmVuY29kZShqc29uRGF0YSkgOiBqc29uRGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGFzeW5jUmVxdWVzdChtZXRob2QgfHwgb3B0aW9ucy5tZXRob2QgfHwgIlBPU1QiLCB1cmksIGNiLCBkYXRhKTsKICAgICAgICB9LAoKICAgICAgICBzZXJpYWxpemVGb3JtIDogZnVuY3Rpb24oZm9ybSkgewogICAgICAgICAgICB2YXIgZkVsZW1lbnRzID0gZm9ybS5lbGVtZW50cyB8fCAoZG9jdW1lbnQuZm9ybXNbZm9ybV0gfHwgRXh0LmdldERvbShmb3JtKSkuZWxlbWVudHMsIAogICAgICAgICAgICAgICAgaGFzU3VibWl0ID0gZmFsc2UsIAogICAgICAgICAgICAgICAgZW5jb2RlciA9IGVuY29kZVVSSUNvbXBvbmVudCwgCiAgICAgICAgICAgICAgICBuYW1lLCAKICAgICAgICAgICAgICAgIGRhdGEgPSAnJywgCiAgICAgICAgICAgICAgICB0eXBlLCAKICAgICAgICAgICAgICAgIGhhc1ZhbHVlOwogICAgCiAgICAgICAgICAgIEV4dC5lYWNoKGZFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgICAgICAgICBuYW1lID0gZWxlbWVudC5uYW1lOwogICAgICAgICAgICAgICAgdHlwZSA9IGVsZW1lbnQudHlwZTsKICAgICAgICAKICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5kaXNhYmxlZCAmJiBuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKC9zZWxlY3QtKG9uZXxtdWx0aXBsZSkvaS50ZXN0KHR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEV4dC5lYWNoKGVsZW1lbnQub3B0aW9ucywgZnVuY3Rpb24ob3B0KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHQuc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IG9wdC5oYXNBdHRyaWJ1dGUgPyBvcHQuaGFzQXR0cmlidXRlKCd2YWx1ZScpIDogb3B0LmdldEF0dHJpYnV0ZU5vZGUoJ3ZhbHVlJykuc3BlY2lmaWVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gU3RyaW5nLmZvcm1hdCgiezB9PXsxfSYiLCBlbmNvZGVyKG5hbWUpLCBlbmNvZGVyKGhhc1ZhbHVlID8gb3B0LnZhbHVlIDogb3B0LnRleHQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKC9maWxlfHVuZGVmaW5lZHxyZXNldHxidXR0b24vaS50ZXN0KHR5cGUpKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISgvcmFkaW98Y2hlY2tib3gvaS50ZXN0KHR5cGUpICYmICFlbGVtZW50LmNoZWNrZWQpICYmICEodHlwZSA9PSAnc3VibWl0JyAmJiBoYXNTdWJtaXQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhICs9IGVuY29kZXIobmFtZSkgKyAnPScgKyBlbmNvZGVyKGVsZW1lbnQudmFsdWUpICsgJyYnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzU3VibWl0ID0gL3N1Ym1pdC9pLnRlc3QodHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZGF0YS5zdWJzdHIoMCwgZGF0YS5sZW5ndGggLSAxKTsKICAgICAgICB9LAoKICAgICAgICB1c2VEZWZhdWx0SGVhZGVyIDogdHJ1ZSwKICAgICAgICBkZWZhdWx0UG9zdEhlYWRlciA6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnLAogICAgICAgIHVzZURlZmF1bHRYaHJIZWFkZXIgOiB0cnVlLAogICAgICAgIGRlZmF1bHRYaHJIZWFkZXIgOiAnWE1MSHR0cFJlcXVlc3QnLAogICAgICAgIHBvbGwgOiB7fSwKICAgICAgICB0aW1lb3V0IDoge30sCiAgICAgICAgY29ubjoge30sCiAgICAgICAgcG9sbEludGVydmFsIDogNTAsCiAgICAgICAgdHJhbnNhY3Rpb25JZCA6IDAsCgovLyAgVGhpcyBpcyBuZXZlciBjYWxsZWQgLSBJcyBpdCB3b3J0aCBleHBvc2luZyB0aGlzPwovLyAgICAgICAgICBzZXRQcm9nSWQgOiBmdW5jdGlvbihpZCkgewovLyAgICAgICAgICAgICAgYWN0aXZlWC51bnNoaWZ0KGlkKTsKLy8gICAgICAgICAgfSwKCi8vICBUaGlzIGlzIG5ldmVyIGNhbGxlZCAtIElzIGl0IHdvcnRoIGV4cG9zaW5nIHRoaXM/Ci8vICAgICAgICAgIHNldERlZmF1bHRQb3N0SGVhZGVyIDogZnVuY3Rpb24oYikgewovLyAgICAgICAgICAgICAgdGhpcy51c2VEZWZhdWx0SGVhZGVyID0gYjsKLy8gICAgICAgICAgfSwKCi8vICBUaGlzIGlzIG5ldmVyIGNhbGxlZCAtIElzIGl0IHdvcnRoIGV4cG9zaW5nIHRoaXM/Ci8vICAgICAgICAgIHNldERlZmF1bHRYaHJIZWFkZXIgOiBmdW5jdGlvbihiKSB7Ci8vICAgICAgICAgICAgICB0aGlzLnVzZURlZmF1bHRYaHJIZWFkZXIgPSBiOwovLyAgICAgICAgICB9LAoKLy8gIFRoaXMgaXMgbmV2ZXIgY2FsbGVkIC0gSXMgaXQgd29ydGggZXhwb3NpbmcgdGhpcz8KLy8gICAgICAgICAgc2V0UG9sbGluZ0ludGVydmFsIDogZnVuY3Rpb24oaSkgewovLyAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpID09ICdudW1iZXInICYmIGlzRmluaXRlKGkpKSB7Ci8vICAgICAgICAgICAgICAgICAgdGhpcy5wb2xsSW50ZXJ2YWwgPSBpOwovLyAgICAgICAgICAgICAgfQovLyAgICAgICAgICB9LAoKLy8gIFRoaXMgaXMgbmV2ZXIgY2FsbGVkIC0gSXMgaXQgd29ydGggZXhwb3NpbmcgdGhpcz8KLy8gICAgICAgICAgcmVzZXREZWZhdWx0SGVhZGVycyA6IGZ1bmN0aW9uKCkgewovLyAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0SGVhZGVycyA9IG51bGw7Ci8vICAgICAgICAgIH0sCgogICAgICAgIGFib3J0IDogZnVuY3Rpb24obywgY2FsbGJhY2ssIGlzVGltZW91dCkgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgdElkID0gby50SWQsCiAgICAgICAgICAgICAgICBpc0Fib3J0ID0gZmFsc2U7CgogICAgICAgICAgICBpZiAobWUuaXNDYWxsSW5Qcm9ncmVzcyhvKSkgewogICAgICAgICAgICAgICAgby5jb25uLmFib3J0KCk7CiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKG1lLnBvbGxbdElkXSk7CiAgICAgICAgICAgICAgICBtZS5wb2xsW3RJZF0gPSBudWxsOwogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHB1Yi50aW1lb3V0W3RJZF0pOwogICAgICAgICAgICAgICAgbWUudGltZW91dFt0SWRdID0gbnVsbDsKCiAgICAgICAgICAgICAgICBoYW5kbGVUcmFuc2FjdGlvblJlc3BvbnNlKG8sIGNhbGxiYWNrLCAoaXNBYm9ydCA9IHRydWUpLCBpc1RpbWVvdXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBpc0Fib3J0OwogICAgICAgIH0sCgogICAgICAgIGlzQ2FsbEluUHJvZ3Jlc3MgOiBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgY29ubmVjdGlvbiBhbmQgcmVhZHlTdGF0ZSBpcyBub3QgMCBvciA0CiAgICAgICAgICAgIHJldHVybiBvLmNvbm4gJiYgIXswOnRydWUsNDp0cnVlfVtvLmNvbm4ucmVhZHlTdGF0ZV07CiAgICAgICAgfQogICAgfTsKICAgIHJldHVybiBwdWI7Cn0oKTsoZnVuY3Rpb24oKXsKICAgIHZhciBFWFRMSUIgPSBFeHQubGliLAogICAgICAgIG5vTmVnYXRpdmVzID0gL3dpZHRofGhlaWdodHxvcGFjaXR5fHBhZGRpbmcvaSwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSAvXigod2lkdGh8aGVpZ2h0KXwodG9wfGxlZnQpKSQvLAogICAgICAgIGRlZmF1bHRVbml0ID0gL3dpZHRofGhlaWdodHx0b3AkfGJvdHRvbSR8bGVmdCR8cmlnaHQkL2ksCiAgICAgICAgb2Zmc2V0VW5pdCA9ICAvXGQrKGVtfCV8ZW58ZXh8cHR8aW58Y218bW18cGMpJC9pLAogICAgICAgIGlzc2V0ID0gZnVuY3Rpb24odil7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7CiAgICAgICAgfSwKICAgICAgICBub3cgPSBmdW5jdGlvbigpewogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKTsKICAgICAgICB9OwoKICAgIEVYVExJQi5BbmltID0gewogICAgICAgIG1vdGlvbiA6IGZ1bmN0aW9uKGVsLCBhcmdzLCBkdXJhdGlvbiwgZWFzaW5nLCBjYiwgc2NvcGUpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucnVuKGVsLCBhcmdzLCBkdXJhdGlvbiwgZWFzaW5nLCBjYiwgc2NvcGUsIEV4dC5saWIuTW90aW9uKTsKICAgICAgICB9LAoKICAgICAgICBydW4gOiBmdW5jdGlvbihlbCwgYXJncywgZHVyYXRpb24sIGVhc2luZywgY2IsIHNjb3BlLCB0eXBlKSB7CiAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IEV4dC5saWIuQW5pbUJhc2U7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBlYXNpbmcgPSBFeHQubGliLkVhc2luZ1tlYXNpbmddOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBhbmltID0gbmV3IHR5cGUoZWwsIGFyZ3MsIGR1cmF0aW9uLCBlYXNpbmcpOwogICAgICAgICAgICBhbmltLmFuaW1hdGVYKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYoRXh0LmlzRnVuY3Rpb24oY2IpKXsKICAgICAgICAgICAgICAgICAgICBjYi5jYWxsKHNjb3BlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBhbmltOwogICAgICAgIH0KICAgIH07CgogICAgRVhUTElCLkFuaW1CYXNlID0gZnVuY3Rpb24oZWwsIGF0dHJpYnV0ZXMsIGR1cmF0aW9uLCBtZXRob2QpIHsKICAgICAgICBpZiAoZWwpIHsKICAgICAgICAgICAgdGhpcy5pbml0KGVsLCBhdHRyaWJ1dGVzLCBkdXJhdGlvbiwgbWV0aG9kKTsKICAgICAgICB9CiAgICB9OwoKICAgIEVYVExJQi5BbmltQmFzZS5wcm90b3R5cGUgPSB7CiAgICAgICAgZG9NZXRob2Q6IGZ1bmN0aW9uKGF0dHIsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgICAgICAgcmV0dXJuIG1lLm1ldGhvZChtZS5jdXJGcmFtZSwgc3RhcnQsIGVuZCAtIHN0YXJ0LCBtZS50b3RhbEZyYW1lcyk7CiAgICAgICAgfSwKCgogICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uKGF0dHIsIHZhbCwgdW5pdCkgewogICAgICAgICAgICBpZiAobm9OZWdhdGl2ZXMudGVzdChhdHRyKSAmJiB2YWwgPCAwKSB7CiAgICAgICAgICAgICAgICB2YWwgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEV4dC5mbHkodGhpcy5lbCwgJ19hbmltJykuc2V0U3R5bGUoYXR0ciwgdmFsICsgdW5pdCk7CiAgICAgICAgfSwKCgogICAgICAgIGdldEF0dHI6IGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgICAgICAgdmFyIGVsID0gRXh0LmZseSh0aGlzLmVsKSwKICAgICAgICAgICAgICAgIHZhbCA9IGVsLmdldFN0eWxlKGF0dHIpLAogICAgICAgICAgICAgICAgYSA9IG9mZnNldEF0dHJpYnV0ZS5leGVjKGF0dHIpIHx8IFtdOwoKICAgICAgICAgICAgaWYgKHZhbCAhPT0gJ2F1dG8nICYmICFvZmZzZXRVbml0LnRlc3QodmFsKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuICghIShhWzJdKSB8fCAoZWwuZ2V0U3R5bGUoJ3Bvc2l0aW9uJykgPT0gJ2Fic29sdXRlJyAmJiAhIShhWzNdKSkpID8gZWwuZG9tWydvZmZzZXQnICsgYVswXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGFbMF0uc3Vic3RyKDEpXSA6IDA7CiAgICAgICAgfSwKCgogICAgICAgIGdldERlZmF1bHRVbml0OiBmdW5jdGlvbihhdHRyKSB7CiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VW5pdC50ZXN0KGF0dHIpID8gJ3B4JyA6ICcnOwogICAgICAgIH0sCgogICAgICAgIGFuaW1hdGVYIDogZnVuY3Rpb24oY2FsbGJhY2ssIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsCiAgICAgICAgICAgICAgICBmID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBtZS5vbkNvbXBsZXRlLnJlbW92ZUxpc3RlbmVyKGYpOwogICAgICAgICAgICAgICAgaWYgKEV4dC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUgfHwgbWUsIG1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgbWUub25Db21wbGV0ZS5hZGRMaXN0ZW5lcihmLCBtZSk7CiAgICAgICAgICAgIG1lLmFuaW1hdGUoKTsKICAgICAgICB9LAoKCiAgICAgICAgc2V0UnVuQXR0cjogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgYSA9IHRoaXMuYXR0cmlidXRlc1thdHRyXSwKICAgICAgICAgICAgICAgIHRvID0gYS50bywKICAgICAgICAgICAgICAgIGJ5ID0gYS5ieSwKICAgICAgICAgICAgICAgIGZyb20gPSBhLmZyb20sCiAgICAgICAgICAgICAgICB1bml0ID0gYS51bml0LAogICAgICAgICAgICAgICAgcmEgPSAodGhpcy5ydW5BdHRyc1thdHRyXSA9IHt9KSwKICAgICAgICAgICAgICAgIGVuZDsKCiAgICAgICAgICAgIGlmICghaXNzZXQodG8pICYmICFpc3NldChieSkpewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc3RhcnQgPSBpc3NldChmcm9tKSA/IGZyb20gOiBtZS5nZXRBdHRyKGF0dHIpOwogICAgICAgICAgICBpZiAoaXNzZXQodG8pKSB7CiAgICAgICAgICAgICAgICBlbmQgPSB0bzsKICAgICAgICAgICAgfWVsc2UgaWYoaXNzZXQoYnkpKSB7CiAgICAgICAgICAgICAgICBpZiAoRXh0LmlzQXJyYXkoc3RhcnQpKXsKICAgICAgICAgICAgICAgICAgICBlbmQgPSBbXTsKICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MCxsZW49c3RhcnQubGVuZ3RoOyBpPGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFtpXSA9IHN0YXJ0W2ldICsgYnlbaV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBieTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgRXh0LmFwcGx5KHJhLCB7CiAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsCiAgICAgICAgICAgICAgICBlbmQ6IGVuZCwKICAgICAgICAgICAgICAgIHVuaXQ6IGlzc2V0KHVuaXQpID8gdW5pdCA6IG1lLmdldERlZmF1bHRVbml0KGF0dHIpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgoKICAgICAgICBpbml0OiBmdW5jdGlvbihlbCwgYXR0cmlidXRlcywgZHVyYXRpb24sIG1ldGhvZCkgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgYWN0dWFsRnJhbWVzID0gMCwKICAgICAgICAgICAgICAgIG1nciA9IEVYVExJQi5BbmltTWdyOwoKICAgICAgICAgICAgRXh0LmFwcGx5KG1lLCB7CiAgICAgICAgICAgICAgICBpc0FuaW1hdGVkOiBmYWxzZSwKICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogbnVsbCwKICAgICAgICAgICAgICAgIGVsOiBFeHQuZ2V0RG9tKGVsKSwKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMgfHwge30sCiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gfHwgMSwKICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kIHx8IEVYVExJQi5FYXNpbmcuZWFzZU5vbmUsCiAgICAgICAgICAgICAgICB1c2VTZWM6IHRydWUsCiAgICAgICAgICAgICAgICBjdXJGcmFtZTogMCwKICAgICAgICAgICAgICAgIHRvdGFsRnJhbWVzOiBtZ3IuZnBzLAogICAgICAgICAgICAgICAgcnVuQXR0cnM6IHt9LAogICAgICAgICAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICBkID0gbWUuZHVyYXRpb247CgogICAgICAgICAgICAgICAgICAgIGlmKG1lLmlzQW5pbWF0ZWQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBtZS5jdXJGcmFtZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgbWUudG90YWxGcmFtZXMgPSBtZS51c2VTZWMgPyBNYXRoLmNlaWwobWdyLmZwcyAqIGQpIDogZDsKICAgICAgICAgICAgICAgICAgICBtZ3IucmVnaXN0ZXJFbGVtZW50KG1lKTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oZmluaXNoKXsKICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICBpZihmaW5pc2gpewogICAgICAgICAgICAgICAgICAgICAgICBtZS5jdXJGcmFtZSA9IG1lLnRvdGFsRnJhbWVzOwogICAgICAgICAgICAgICAgICAgICAgICBtZS5fb25Ud2Vlbi5maXJlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG1nci5zdG9wKG1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgb25TdGFydCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgIGF0dHI7CgogICAgICAgICAgICAgICAgbWUub25TdGFydC5maXJlKCk7CiAgICAgICAgICAgICAgICBtZS5ydW5BdHRycyA9IHt9OwogICAgICAgICAgICAgICAgZm9yKGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKXsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJ1bkF0dHIoYXR0cik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbWUuaXNBbmltYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBtZS5zdGFydFRpbWUgPSBub3coKTsKICAgICAgICAgICAgICAgIGFjdHVhbEZyYW1lcyA9IDA7CiAgICAgICAgICAgIH07CgoKICAgICAgICAgICAgdmFyIG9uVHdlZW4gPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpczsKCiAgICAgICAgICAgICAgICBtZS5vblR3ZWVuLmZpcmUoewogICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBub3coKSAtIG1lLnN0YXJ0VGltZSwKICAgICAgICAgICAgICAgICAgICBjdXJGcmFtZTogbWUuY3VyRnJhbWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHZhciByYSA9IG1lLnJ1bkF0dHJzOwogICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiByYSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cihhdHRyLCBtZS5kb01ldGhvZChhdHRyLCByYVthdHRyXS5zdGFydCwgcmFbYXR0cl0uZW5kKSwgcmFbYXR0cl0udW5pdCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgKythY3R1YWxGcmFtZXM7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgb25Db21wbGV0ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBhY3R1YWwgPSAobm93KCkgLSBtZS5zdGFydFRpbWUpIC8gMTAwMCwKICAgICAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogYWN0dWFsLAogICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXM6IGFjdHVhbEZyYW1lcywKICAgICAgICAgICAgICAgICAgICAgICAgZnBzOiBhY3R1YWxGcmFtZXMgLyBhY3R1YWwKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIG1lLmlzQW5pbWF0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGFjdHVhbEZyYW1lcyA9IDA7CiAgICAgICAgICAgICAgICBtZS5vbkNvbXBsZXRlLmZpcmUoZGF0YSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBtZS5vblN0YXJ0ID0gbmV3IEV4dC51dGlsLkV2ZW50KG1lKTsKICAgICAgICAgICAgbWUub25Ud2VlbiA9IG5ldyBFeHQudXRpbC5FdmVudChtZSk7CiAgICAgICAgICAgIG1lLm9uQ29tcGxldGUgPSBuZXcgRXh0LnV0aWwuRXZlbnQobWUpOwogICAgICAgICAgICAobWUuX29uU3RhcnQgPSBuZXcgRXh0LnV0aWwuRXZlbnQobWUpKS5hZGRMaXN0ZW5lcihvblN0YXJ0KTsKICAgICAgICAgICAgKG1lLl9vblR3ZWVuID0gbmV3IEV4dC51dGlsLkV2ZW50KG1lKSkuYWRkTGlzdGVuZXIob25Ud2Vlbik7CiAgICAgICAgICAgIChtZS5fb25Db21wbGV0ZSA9IG5ldyBFeHQudXRpbC5FdmVudChtZSkpLmFkZExpc3RlbmVyKG9uQ29tcGxldGUpOwogICAgICAgIH0KICAgIH07CgoKICAgIEV4dC5saWIuQW5pbU1nciA9IG5ldyBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICB0aHJlYWQgPSBudWxsLAogICAgICAgICAgICBxdWV1ZSA9IFtdLAogICAgICAgICAgICB0d2VlbkNvdW50ID0gMDsKCgogICAgICAgIEV4dC5hcHBseShtZSwgewogICAgICAgICAgICBmcHM6IDEwMDAsCiAgICAgICAgICAgIGRlbGF5OiAxLAogICAgICAgICAgICByZWdpc3RlckVsZW1lbnQ6IGZ1bmN0aW9uKHR3ZWVuKXsKICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2godHdlZW4pOwogICAgICAgICAgICAgICAgKyt0d2VlbkNvdW50OwogICAgICAgICAgICAgICAgdHdlZW4uX29uU3RhcnQuZmlyZSgpOwogICAgICAgICAgICAgICAgbWUuc3RhcnQoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVuUmVnaXN0ZXI6IGZ1bmN0aW9uKHR3ZWVuLCBpbmRleCl7CiAgICAgICAgICAgICAgICB0d2Vlbi5fb25Db21wbGV0ZS5maXJlKCk7CiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4IHx8IGdldEluZGV4KHR3ZWVuKTsKICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKC0tdHdlZW5Db3VudCA8PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgbWUuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZih0aHJlYWQgPT09IG51bGwpewogICAgICAgICAgICAgICAgICAgIHRocmVhZCA9IHNldEludGVydmFsKG1lLnJ1biwgbWUuZGVsYXkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24odHdlZW4pewogICAgICAgICAgICAgICAgaWYoIXR3ZWVuKXsKICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRocmVhZCk7CiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gcXVldWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpewogICAgICAgICAgICAgICAgICAgICAgICBpZihxdWV1ZVswXS5pc0FuaW1hdGVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVuUmVnaXN0ZXIocXVldWVbMF0sIDApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgICAgICAgICAgICAgIHRocmVhZCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgdHdlZW5Db3VudCA9IDA7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBtZS51blJlZ2lzdGVyKHR3ZWVuKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJ1bjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB0ZiwgaSwgbGVuLCB0d2VlbjsKICAgICAgICAgICAgICAgIGZvcihpID0gMCwgbGVuID0gcXVldWUubGVuZ3RoOyBpPGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdHdlZW4gPSBxdWV1ZVtpXTsKICAgICAgICAgICAgICAgICAgICBpZih0d2VlbiAmJiB0d2Vlbi5pc0FuaW1hdGVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGYgPSB0d2Vlbi50b3RhbEZyYW1lczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYodHdlZW4uY3VyRnJhbWUgPCB0ZiB8fCB0ZiA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3R3ZWVuLmN1ckZyYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHdlZW4udXNlU2VjKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0RnJhbWUodHdlZW4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW4uX29uVHdlZW4uZmlyZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0b3AodHdlZW4pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHZhciBnZXRJbmRleCA9IGZ1bmN0aW9uKGFuaW0pIHsKICAgICAgICAgICAgdmFyIGksIGxlbjsKICAgICAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBxdWV1ZS5sZW5ndGg7IGk8bGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmKHF1ZXVlW2ldID09PSBhbmltKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH07CgogICAgICAgIHZhciBjb3JyZWN0RnJhbWUgPSBmdW5jdGlvbih0d2VlbikgewogICAgICAgICAgICB2YXIgZnJhbWVzID0gdHdlZW4udG90YWxGcmFtZXMsCiAgICAgICAgICAgICAgICBmcmFtZSA9IHR3ZWVuLmN1ckZyYW1lLAogICAgICAgICAgICAgICAgZHVyYXRpb24gPSB0d2Vlbi5kdXJhdGlvbiwKICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gKGZyYW1lICogZHVyYXRpb24gKiAxMDAwIC8gZnJhbWVzKSwKICAgICAgICAgICAgICAgIGVsYXBzZWQgPSAobm93KCkgLSB0d2Vlbi5zdGFydFRpbWUpLAogICAgICAgICAgICAgICAgdHdlYWsgPSAwOwoKICAgICAgICAgICAgaWYoZWxhcHNlZCA8IGR1cmF0aW9uICogMTAwMCl7CiAgICAgICAgICAgICAgICB0d2VhayA9IE1hdGgucm91bmQoKGVsYXBzZWQgLyBleHBlY3RlZCAtIDEpICogZnJhbWUpOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIHR3ZWFrID0gZnJhbWVzIC0gKGZyYW1lICsgMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYodHdlYWsgPiAwICYmIGlzRmluaXRlKHR3ZWFrKSl7CiAgICAgICAgICAgICAgICBpZih0d2Vlbi5jdXJGcmFtZSArIHR3ZWFrID49IGZyYW1lcyl7CiAgICAgICAgICAgICAgICAgICAgdHdlYWsgPSBmcmFtZXMgLSAoZnJhbWUgKyAxKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHR3ZWVuLmN1ckZyYW1lICs9IHR3ZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH07CgogICAgRVhUTElCLkJlemllciA9IG5ldyBmdW5jdGlvbigpIHsKCiAgICAgICAgdGhpcy5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKHBvaW50cywgdCkgewogICAgICAgICAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsCiAgICAgICAgICAgICAgICB0bXAgPSBbXSwKICAgICAgICAgICAgICAgIGMgPSAxIC0gdCwKICAgICAgICAgICAgICAgIGksCiAgICAgICAgICAgICAgICBqOwoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgewogICAgICAgICAgICAgICAgdG1wW2ldID0gW3BvaW50c1tpXVswXSwgcG9pbnRzW2ldWzFdXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IG47ICsraikgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG4gLSBqOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICB0bXBbaV1bMF0gPSBjICogdG1wW2ldWzBdICsgdCAqIHRtcFtwYXJzZUludChpICsgMSwgMTApXVswXTsKICAgICAgICAgICAgICAgICAgICB0bXBbaV1bMV0gPSBjICogdG1wW2ldWzFdICsgdCAqIHRtcFtwYXJzZUludChpICsgMSwgMTApXVsxXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIFsgdG1wWzBdWzBdLCB0bXBbMF1bMV0gXTsKCiAgICAgICAgfTsKICAgIH07CgoKICAgIEVYVExJQi5FYXNpbmcgPSB7CiAgICAgICAgZWFzZU5vbmU6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjICogdCAvIGQgKyBiOwogICAgICAgIH0sCgoKICAgICAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICsgYjsKICAgICAgICB9LAoKCiAgICAgICAgZWFzZU91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIC1jICogKHQgLz0gZCkgKiAodCAtIDIpICsgYjsKICAgICAgICB9CiAgICB9OwoKICAgIChmdW5jdGlvbigpIHsKICAgICAgICBFWFRMSUIuTW90aW9uID0gZnVuY3Rpb24oZWwsIGF0dHJpYnV0ZXMsIGR1cmF0aW9uLCBtZXRob2QpIHsKICAgICAgICAgICAgaWYgKGVsKSB7CiAgICAgICAgICAgICAgICBFWFRMSUIuTW90aW9uLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbCwgYXR0cmlidXRlcywgZHVyYXRpb24sIG1ldGhvZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBFeHQuZXh0ZW5kKEVYVExJQi5Nb3Rpb24sIEV4dC5saWIuQW5pbUJhc2UpOwoKICAgICAgICB2YXIgc3VwZXJjbGFzcyA9IEVYVExJQi5Nb3Rpb24uc3VwZXJjbGFzcywKICAgICAgICAgICAgcG9pbnRzUmUgPSAvXnBvaW50cyQvaTsKCiAgICAgICAgRXh0LmFwcGx5KEVYVExJQi5Nb3Rpb24ucHJvdG90eXBlLCB7CiAgICAgICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uKGF0dHIsIHZhbCwgdW5pdCl7CiAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgIHNldEF0dHIgPSBzdXBlcmNsYXNzLnNldEF0dHI7CgogICAgICAgICAgICAgICAgaWYgKHBvaW50c1JlLnRlc3QoYXR0cikpIHsKICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAncHgnOwogICAgICAgICAgICAgICAgICAgIHNldEF0dHIuY2FsbChtZSwgJ2xlZnQnLCB2YWxbMF0sIHVuaXQpOwogICAgICAgICAgICAgICAgICAgIHNldEF0dHIuY2FsbChtZSwgJ3RvcCcsIHZhbFsxXSwgdW5pdCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldEF0dHIuY2FsbChtZSwgYXR0ciwgdmFsLCB1bml0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGdldEF0dHI6IGZ1bmN0aW9uKGF0dHIpewogICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBnZXRBdHRyID0gc3VwZXJjbGFzcy5nZXRBdHRyOwoKICAgICAgICAgICAgICAgIHJldHVybiBwb2ludHNSZS50ZXN0KGF0dHIpID8gW2dldEF0dHIuY2FsbChtZSwgJ2xlZnQnKSwgZ2V0QXR0ci5jYWxsKG1lLCAndG9wJyldIDogZ2V0QXR0ci5jYWxsKG1lLCBhdHRyKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGRvTWV0aG9kOiBmdW5jdGlvbihhdHRyLCBzdGFydCwgZW5kKXsKICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7CgogICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50c1JlLnRlc3QoYXR0cikKICAgICAgICAgICAgICAgICAgICAgICAgPyBFWFRMSUIuQmV6aWVyLmdldFBvc2l0aW9uKG1lLnJ1bkF0dHJzW2F0dHJdLCBtZS5tZXRob2QobWUuY3VyRnJhbWUsIDAsIDEwMCwgbWUudG90YWxGcmFtZXMpIC8gMTAwKQogICAgICAgICAgICAgICAgICAgICAgICA6IHN1cGVyY2xhc3MuZG9NZXRob2QuY2FsbChtZSwgYXR0ciwgc3RhcnQsIGVuZCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZXRSdW5BdHRyOiBmdW5jdGlvbihhdHRyKXsKICAgICAgICAgICAgICAgIGlmKHBvaW50c1JlLnRlc3QoYXR0cikpewoKICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHRoaXMuZWwsCiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHRoaXMuYXR0cmlidXRlcy5wb2ludHMsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wgPSBwb2ludHMuY29udHJvbCB8fCBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IHBvaW50cy5mcm9tLAogICAgICAgICAgICAgICAgICAgICAgICB0byA9IHBvaW50cy50bywKICAgICAgICAgICAgICAgICAgICAgICAgYnkgPSBwb2ludHMuYnksCiAgICAgICAgICAgICAgICAgICAgICAgIERPTSA9IEVYVExJQi5Eb20sCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgICBpLAogICAgICAgICAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiwKICAgICAgICAgICAgICAgICAgICAgICAgcmE7CgoKICAgICAgICAgICAgICAgICAgICBpZihjb250cm9sLmxlbmd0aCA+IDAgJiYgIUV4dC5pc0FycmF5KGNvbnRyb2xbMF0pKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbCA9IFtjb250cm9sXTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLGxlbiA9IGNvbnRyb2wubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFtpXSA9IGNvbnRyb2xbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbCA9IHRtcDsKICAgICAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIEV4dC5mbHkoZWwsICdfYW5pbScpLnBvc2l0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgRE9NLnNldFhZKGVsLCBpc3NldChmcm9tKSA/IGZyb20gOiBET00uZ2V0WFkoZWwpKTsKICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG1lLmdldEF0dHIoJ3BvaW50cycpOwoKCiAgICAgICAgICAgICAgICAgICAgaWYoaXNzZXQodG8pKXsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gdHJhbnNsYXRlVmFsdWVzLmNhbGwobWUsIHRvLCBzdGFydCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsbGVuID0gY29udHJvbC5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbFtpXSA9IHRyYW5zbGF0ZVZhbHVlcy5jYWxsKG1lLCBjb250cm9sW2ldLCBzdGFydCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzc2V0KGJ5KSkgewogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBbc3RhcnRbMF0gKyBieVswXSwgc3RhcnRbMV0gKyBieVsxXV07CgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLGxlbiA9IGNvbnRyb2wubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xbaV0gPSBbIHN0YXJ0WzBdICsgY29udHJvbFtpXVswXSwgc3RhcnRbMV0gKyBjb250cm9sW2ldWzFdIF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJhID0gdGhpcy5ydW5BdHRyc1thdHRyXSA9IFtzdGFydF07CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByYSA9IHJhLmNvbmNhdChjb250cm9sKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJhW3JhLmxlbmd0aF0gPSBlbmQ7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBzdXBlcmNsYXNzLnNldFJ1bkF0dHIuY2FsbCh0aGlzLCBhdHRyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgdHJhbnNsYXRlVmFsdWVzID0gZnVuY3Rpb24odmFsLCBzdGFydCkgewogICAgICAgICAgICB2YXIgcGFnZVhZID0gRVhUTElCLkRvbS5nZXRYWSh0aGlzLmVsKTsKICAgICAgICAgICAgcmV0dXJuIFt2YWxbMF0gLSBwYWdlWFlbMF0gKyBzdGFydFswXSwgdmFsWzFdIC0gcGFnZVhZWzFdICsgc3RhcnRbMV1dOwogICAgICAgIH07CiAgICB9KSgpOwp9KSgpOy8vIEVhc2luZyBmdW5jdGlvbnMKKGZ1bmN0aW9uKCl7CiAgICAvLyBzaG9ydGN1dHMgdG8gYWlkIGNvbXByZXNzaW9uCiAgICB2YXIgYWJzID0gTWF0aC5hYnMsCiAgICAgICAgcGkgPSBNYXRoLlBJLAogICAgICAgIGFzaW4gPSBNYXRoLmFzaW4sCiAgICAgICAgcG93ID0gTWF0aC5wb3csCiAgICAgICAgc2luID0gTWF0aC5zaW4sCiAgICAgICAgRVhUTElCID0gRXh0LmxpYjsKCiAgICBFeHQuYXBwbHkoRVhUTElCLkVhc2luZywgewoKICAgICAgICBlYXNlQm90aDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuICgodCAvPSBkIC8gMikgPCAxKSAgPyAgYyAvIDIgKiB0ICogdCArIGIgIDogIC1jIC8gMiAqICgoLS10KSAqICh0IC0gMikgLSAxKSArIGI7CiAgICAgICAgfSwKCiAgICAgICAgZWFzZUluU3Ryb25nOiBmdW5jdGlvbiAodCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICsgYjsKICAgICAgICB9LAoKICAgICAgICBlYXNlT3V0U3Ryb25nOiBmdW5jdGlvbiAodCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gLWMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiOwogICAgICAgIH0sCgogICAgICAgIGVhc2VCb3RoU3Ryb25nOiBmdW5jdGlvbiAodCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gKCh0IC89IGQgLyAyKSA8IDEpICA/ICBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKyBiICA6ICAtYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSArIGI7CiAgICAgICAgfSwKCiAgICAgICAgZWxhc3RpY0luOiBmdW5jdGlvbiAodCwgYiwgYywgZCwgYSwgcCkgewogICAgICAgICAgICBpZiAodCA9PSAwIHx8ICh0IC89IGQpID09IDEpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ID09IDAgPyBiIDogYiArIGM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcCA9IHAgfHwgKGQgKiAuMyk7CgogICAgICAgICAgICB2YXIgczsKICAgICAgICAgICAgaWYgKGEgPj0gYWJzKGMpKSB7CiAgICAgICAgICAgICAgICBzID0gcCAvICgyICogcGkpICogYXNpbihjIC8gYSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhID0gYzsKICAgICAgICAgICAgICAgIHMgPSBwIC8gNDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIC0oYSAqIHBvdygyLCAxMCAqICh0IC09IDEpKSAqIHNpbigodCAqIGQgLSBzKSAqICgyICogcGkpIC8gcCkpICsgYjsKCiAgICAgICAgfSwKCiAgICAgICAgZWxhc3RpY091dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIGEsIHApIHsKICAgICAgICAgICAgaWYgKHQgPT0gMCB8fCAodCAvPSBkKSA9PSAxKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSAwID8gYiA6IGIgKyBjOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHAgPSBwIHx8IChkICogLjMpOwoKICAgICAgICAgICAgdmFyIHM7CiAgICAgICAgICAgIGlmIChhID49IGFicyhjKSkgewogICAgICAgICAgICAgICAgcyA9IHAgLyAoMiAqIHBpKSAqIGFzaW4oYyAvIGEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYSA9IGM7CiAgICAgICAgICAgICAgICBzID0gcCAvIDQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBhICogcG93KDIsIC0xMCAqIHQpICogc2luKCh0ICogZCAtIHMpICogKDIgKiBwaSkgLyBwKSArIGMgKyBiOwogICAgICAgIH0sCgogICAgICAgIGVsYXN0aWNCb3RoOiBmdW5jdGlvbiAodCwgYiwgYywgZCwgYSwgcCkgewogICAgICAgICAgICBpZiAodCA9PSAwIHx8ICh0IC89IGQgLyAyKSA9PSAyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSAwID8gYiA6IGIgKyBjOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwID0gcCB8fCAoZCAqICguMyAqIDEuNSkpOwoKICAgICAgICAgICAgdmFyIHM7CiAgICAgICAgICAgIGlmIChhID49IGFicyhjKSkgewogICAgICAgICAgICAgICAgcyA9IHAgLyAoMiAqIHBpKSAqIGFzaW4oYyAvIGEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYSA9IGM7CiAgICAgICAgICAgICAgICBzID0gcCAvIDQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0IDwgMSA/CiAgICAgICAgICAgICAgICAgICAgLS41ICogKGEgKiBwb3coMiwgMTAgKiAodCAtPSAxKSkgKiBzaW4oKHQgKiBkIC0gcykgKiAoMiAqIHBpKSAvIHApKSArIGIgOgogICAgICAgICAgICAgICAgICAgIGEgKiBwb3coMiwgLTEwICogKHQgLT0gMSkpICogc2luKCh0ICogZCAtIHMpICogKDIgKiBwaSkgLyBwKSAqIC41ICsgYyArIGI7CiAgICAgICAgfSwKCiAgICAgICAgYmFja0luOiBmdW5jdGlvbiAodCwgYiwgYywgZCwgcykgewogICAgICAgICAgICBzID0gcyB8fCAgMS43MDE1ODsKICAgICAgICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSArIGI7CiAgICAgICAgfSwKCgogICAgICAgIGJhY2tPdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkLCBzKSB7CiAgICAgICAgICAgIGlmICghcykgewogICAgICAgICAgICAgICAgcyA9IDEuNzAxNTg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMSkgKyBiOwogICAgICAgIH0sCgoKICAgICAgICBiYWNrQm90aDogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIHMpIHsKICAgICAgICAgICAgcyA9IHMgfHwgMS43MDE1ODsKCiAgICAgICAgICAgIHJldHVybiAoKHQgLz0gZCAvIDIgKSA8IDEpID8KICAgICAgICAgICAgICAgICAgICBjIC8gMiAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSkgKyBiIDoKICAgICAgICAgICAgICAgICAgICBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKSArIGI7CiAgICAgICAgfSwKCgogICAgICAgIGJvdW5jZUluOiBmdW5jdGlvbiAodCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyAtIEVYVExJQi5FYXNpbmcuYm91bmNlT3V0KGQgLSB0LCAwLCBjLCBkKSArIGI7CiAgICAgICAgfSwKCgogICAgICAgIGJvdW5jZU91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHsKICAgICAgICBpZiAoKHQgLz0gZCkgPCAoMSAvIDIuNzUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiB0ICogdCkgKyBiOwogICAgICAgICAgICB9IGVsc2UgaWYgKHQgPCAoMiAvIDIuNzUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIC43NSkgKyBiOwogICAgICAgICAgICB9IGVsc2UgaWYgKHQgPCAoMi41IC8gMi43NSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIC45Mzc1KSArIGI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIC45ODQzNzUpICsgYjsKICAgICAgICB9LAoKCiAgICAgICAgYm91bmNlQm90aDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuICh0IDwgZCAvIDIpID8KICAgICAgICAgICAgICAgICAgICBFWFRMSUIuRWFzaW5nLmJvdW5jZUluKHQgKiAyLCAwLCBjLCBkKSAqIC41ICsgYiA6CiAgICAgICAgICAgICAgICAgICAgRVhUTElCLkVhc2luZy5ib3VuY2VPdXQodCAqIDIgLSBkLCAwLCBjLCBkKSAqIC41ICsgYyAqIC41ICsgYjsKICAgICAgICB9CiAgICB9KTsKfSkoKTsKCihmdW5jdGlvbigpIHsKICAgIHZhciBFWFRMSUIgPSBFeHQubGliOwogICAgLy8gQ29sb3IgQW5pbWF0aW9uCiAgICBFWFRMSUIuQW5pbS5jb2xvciA9IGZ1bmN0aW9uKGVsLCBhcmdzLCBkdXJhdGlvbiwgZWFzaW5nLCBjYiwgc2NvcGUpIHsKICAgICAgICByZXR1cm4gRVhUTElCLkFuaW0ucnVuKGVsLCBhcmdzLCBkdXJhdGlvbiwgZWFzaW5nLCBjYiwgc2NvcGUsIEVYVExJQi5Db2xvckFuaW0pOwogICAgfTsKCiAgICBFWFRMSUIuQ29sb3JBbmltID0gZnVuY3Rpb24oZWwsIGF0dHJpYnV0ZXMsIGR1cmF0aW9uLCBtZXRob2QpIHsKICAgICAgICBFWFRMSUIuQ29sb3JBbmltLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbCwgYXR0cmlidXRlcywgZHVyYXRpb24sIG1ldGhvZCk7CiAgICB9OwoKICAgIEV4dC5leHRlbmQoRVhUTElCLkNvbG9yQW5pbSwgRVhUTElCLkFuaW1CYXNlKTsKCiAgICB2YXIgc3VwZXJjbGFzcyA9IEVYVExJQi5Db2xvckFuaW0uc3VwZXJjbGFzcywKICAgICAgICBjb2xvclJFID0gL2NvbG9yJC9pLAogICAgICAgIHRyYW5zcGFyZW50UkUgPSAvXnRyYW5zcGFyZW50fHJnYmFcKDAsIDAsIDAsIDBcKSQvLAogICAgICAgIHJnYlJFID0gL15yZ2JcKChbMC05XSspXHMqLFxzKihbMC05XSspXHMqLFxzKihbMC05XSspXCkkL2ksCiAgICAgICAgaGV4UkU9IC9eIz8oWzAtOUEtRl17Mn0pKFswLTlBLUZdezJ9KShbMC05QS1GXXsyfSkkL2ksCiAgICAgICAgaGV4M1JFID0gL14jPyhbMC05QS1GXXsxfSkoWzAtOUEtRl17MX0pKFswLTlBLUZdezF9KSQvaSwKICAgICAgICBpc3NldCA9IGZ1bmN0aW9uKHYpewogICAgICAgICAgICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnOwogICAgICAgIH07CgogICAgLy8gcHJpdmF0ZQogICAgZnVuY3Rpb24gcGFyc2VDb2xvcihzKSB7CiAgICAgICAgdmFyIHBpID0gcGFyc2VJbnQsCiAgICAgICAgICAgIGJhc2UsCiAgICAgICAgICAgIG91dCA9IG51bGwsCiAgICAgICAgICAgIGM7CgogICAgICAgIGlmIChzLmxlbmd0aCA9PSAzKSB7CiAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgIH0KCiAgICAgICAgRXh0LmVhY2goW2hleFJFLCByZ2JSRSwgaGV4M1JFXSwgZnVuY3Rpb24ocmUsIGlkeCl7CiAgICAgICAgICAgIGJhc2UgPSAoaWR4ICUgMiA9PSAwKSA/IDE2IDogMTA7CiAgICAgICAgICAgIGMgPSByZS5leGVjKHMpOwogICAgICAgICAgICBpZihjICYmIGMubGVuZ3RoID09IDQpewogICAgICAgICAgICAgICAgb3V0ID0gW3BpKGNbMV0sIGJhc2UpLCBwaShjWzJdLCBiYXNlKSwgcGkoY1szXSwgYmFzZSldOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBFeHQuYXBwbHkoRVhUTElCLkNvbG9yQW5pbS5wcm90b3R5cGUsIHsKICAgICAgICBnZXRBdHRyIDogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgZWwgPSBtZS5lbCwKICAgICAgICAgICAgICAgIHZhbDsKICAgICAgICAgICAgaWYoY29sb3JSRS50ZXN0KGF0dHIpKXsKICAgICAgICAgICAgICAgIHdoaWxlKGVsICYmIHRyYW5zcGFyZW50UkUudGVzdCh2YWwgPSBFeHQuZmx5KGVsKS5nZXRTdHlsZShhdHRyKSkpewogICAgICAgICAgICAgICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICB2YWwgPSAiZmZmIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICB2YWwgPSBzdXBlcmNsYXNzLmdldEF0dHIuY2FsbChtZSwgYXR0cik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgICB9LAoKICAgICAgICBkb01ldGhvZCA6IGZ1bmN0aW9uKGF0dHIsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgICAgdmFyIG1lID0gdGhpcywKICAgICAgICAgICAgICAgIHZhbCwKICAgICAgICAgICAgICAgIGZsb29yID0gTWF0aC5mbG9vciwKICAgICAgICAgICAgICAgIGksCiAgICAgICAgICAgICAgICBsZW4sCiAgICAgICAgICAgICAgICB2OwoKICAgICAgICAgICAgaWYoY29sb3JSRS50ZXN0KGF0dHIpKXsKICAgICAgICAgICAgICAgIHZhbCA9IFtdOwogICAgICAgICAgICAgICAgZW5kID0gZW5kIHx8IFtdOwoKICAgICAgICAgICAgICAgIGZvcihpID0gMCwgbGVuID0gc3RhcnQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2ID0gc3RhcnRbaV07CiAgICAgICAgICAgICAgICAgICAgdmFsW2ldID0gc3VwZXJjbGFzcy5kb01ldGhvZC5jYWxsKG1lLCBhdHRyLCB2LCBlbmRbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFsID0gJ3JnYignICsgZmxvb3IodmFsWzBdKSArICcsJyArIGZsb29yKHZhbFsxXSkgKyAnLCcgKyBmbG9vcih2YWxbMl0pICsgJyknOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIHZhbCA9IHN1cGVyY2xhc3MuZG9NZXRob2QuY2FsbChtZSwgYXR0ciwgc3RhcnQsIGVuZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgICB9LAoKICAgICAgICBzZXRSdW5BdHRyIDogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzLAogICAgICAgICAgICAgICAgYSA9IG1lLmF0dHJpYnV0ZXNbYXR0cl0sCiAgICAgICAgICAgICAgICB0byA9IGEudG8sCiAgICAgICAgICAgICAgICBieSA9IGEuYnksCiAgICAgICAgICAgICAgICByYTsKCiAgICAgICAgICAgIHN1cGVyY2xhc3Muc2V0UnVuQXR0ci5jYWxsKG1lLCBhdHRyKTsKICAgICAgICAgICAgcmEgPSBtZS5ydW5BdHRyc1thdHRyXTsKICAgICAgICAgICAgaWYoY29sb3JSRS50ZXN0KGF0dHIpKXsKICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHBhcnNlQ29sb3IocmEuc3RhcnQpLAogICAgICAgICAgICAgICAgICAgIGVuZCA9IHBhcnNlQ29sb3IocmEuZW5kKTsKCiAgICAgICAgICAgICAgICBpZighaXNzZXQodG8pICYmIGlzc2V0KGJ5KSl7CiAgICAgICAgICAgICAgICAgICAgZW5kID0gcGFyc2VDb2xvcihieSk7CiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTAsbGVuPXN0YXJ0Lmxlbmd0aDsgaTxsZW47IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBlbmRbaV0gPSBzdGFydFtpXSArIGVuZFtpXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYS5zdGFydCA9IHN0YXJ0OwogICAgICAgICAgICAgICAgcmEuZW5kID0gZW5kOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7Cn0pKCk7CgoKKGZ1bmN0aW9uKCkgewogICAgLy8gU2Nyb2xsIEFuaW1hdGlvbgogICAgdmFyIEVYVExJQiA9IEV4dC5saWI7CiAgICBFWFRMSUIuQW5pbS5zY3JvbGwgPSBmdW5jdGlvbihlbCwgYXJncywgZHVyYXRpb24sIGVhc2luZywgY2IsIHNjb3BlKSB7CiAgICAgICAgcmV0dXJuIEVYVExJQi5BbmltLnJ1bihlbCwgYXJncywgZHVyYXRpb24sIGVhc2luZywgY2IsIHNjb3BlLCBFWFRMSUIuU2Nyb2xsKTsKICAgIH07CgogICAgRVhUTElCLlNjcm9sbCA9IGZ1bmN0aW9uKGVsLCBhdHRyaWJ1dGVzLCBkdXJhdGlvbiwgbWV0aG9kKSB7CiAgICAgICAgaWYoZWwpewogICAgICAgICAgICBFWFRMSUIuU2Nyb2xsLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbCwgYXR0cmlidXRlcywgZHVyYXRpb24sIG1ldGhvZCk7CiAgICAgICAgfQogICAgfTsKCiAgICBFeHQuZXh0ZW5kKEVYVExJQi5TY3JvbGwsIEVYVExJQi5Db2xvckFuaW0pOwoKICAgIHZhciBzdXBlcmNsYXNzID0gRVhUTElCLlNjcm9sbC5zdXBlcmNsYXNzLAogICAgICAgIFNDUk9MTCA9ICdzY3JvbGwnOwoKICAgIEV4dC5hcHBseShFWFRMSUIuU2Nyb2xsLnByb3RvdHlwZSwgewoKICAgICAgICBkb01ldGhvZCA6IGZ1bmN0aW9uKGF0dHIsIHN0YXJ0LCBlbmQpIHsKICAgICAgICAgICAgdmFyIHZhbCwKICAgICAgICAgICAgICAgIG1lID0gdGhpcywKICAgICAgICAgICAgICAgIGN1ckZyYW1lID0gbWUuY3VyRnJhbWUsCiAgICAgICAgICAgICAgICB0b3RhbEZyYW1lcyA9IG1lLnRvdGFsRnJhbWVzOwoKICAgICAgICAgICAgaWYoYXR0ciA9PSBTQ1JPTEwpewogICAgICAgICAgICAgICAgdmFsID0gW21lLm1ldGhvZChjdXJGcmFtZSwgc3RhcnRbMF0sIGVuZFswXSAtIHN0YXJ0WzBdLCB0b3RhbEZyYW1lcyksCiAgICAgICAgICAgICAgICAgICAgICAgbWUubWV0aG9kKGN1ckZyYW1lLCBzdGFydFsxXSwgZW5kWzFdIC0gc3RhcnRbMV0sIHRvdGFsRnJhbWVzKV07CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdmFsID0gc3VwZXJjbGFzcy5kb01ldGhvZC5jYWxsKG1lLCBhdHRyLCBzdGFydCwgZW5kKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgIH0sCgogICAgICAgIGdldEF0dHIgOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7CgogICAgICAgICAgICBpZiAoYXR0ciA9PSBTQ1JPTEwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbbWUuZWwuc2Nyb2xsTGVmdCwgbWUuZWwuc2Nyb2xsVG9wXTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXJjbGFzcy5nZXRBdHRyLmNhbGwobWUsIGF0dHIpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgc2V0QXR0ciA6IGZ1bmN0aW9uKGF0dHIsIHZhbCwgdW5pdCkgewogICAgICAgICAgICB2YXIgbWUgPSB0aGlzOwoKICAgICAgICAgICAgaWYoYXR0ciA9PSBTQ1JPTEwpewogICAgICAgICAgICAgICAgbWUuZWwuc2Nyb2xsTGVmdCA9IHZhbFswXTsKICAgICAgICAgICAgICAgIG1lLmVsLnNjcm9sbFRvcCA9IHZhbFsxXTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBzdXBlcmNsYXNzLnNldEF0dHIuY2FsbChtZSwgYXR0ciwgdmFsLCB1bml0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwp9KSgpOwkKCWlmIChFeHQuaXNJRSkgewogICAgICAgIGZ1bmN0aW9uIGZuQ2xlYW5VcCgpIHsKICAgICAgICAgICAgdmFyIHAgPSBGdW5jdGlvbi5wcm90b3R5cGU7CiAgICAgICAgICAgIGRlbGV0ZSBwLmNyZWF0ZVNlcXVlbmNlOwogICAgICAgICAgICBkZWxldGUgcC5kZWZlcjsKICAgICAgICAgICAgZGVsZXRlIHAuY3JlYXRlRGVsZWdhdGU7CiAgICAgICAgICAgIGRlbGV0ZSBwLmNyZWF0ZUNhbGxiYWNrOwogICAgICAgICAgICBkZWxldGUgcC5jcmVhdGVJbnRlcmNlcHRvcjsKCiAgICAgICAgICAgIHdpbmRvdy5kZXRhY2hFdmVudCgib251bmxvYWQiLCBmbkNsZWFuVXApOwogICAgICAgIH0KICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoIm9udW5sb2FkIiwgZm5DbGVhblVwKTsKICAgIH0KfSkoKTs=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="22" hostname="demo.borland.com" path="/InsuranceWebExtJS/ext/ext-all-debug.js" url="http://demo.borland.com/InsuranceWebExtJS/ext/ext-all-debug.js" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15236" connectionId="1816" origin="HTML" encodingType="ANSI" ordinal="3" startDateTime="2019-02-27T16:49:29.185+05:30" startTime="3826" endTime="5089" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Referer" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9JbnN1cmFuY2VXZWJFeHRKUy9leHQvZXh0LWFsbC1kZWJ1Zy5qcyBIVFRQLzEuMQ0KUmVmZXJlcjogaHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpBY2NlcHQ6ICovKg0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KSG9zdDogZGVtby5ib3JsYW5kLmNvbQ0KQ29va2llOiBKU0VTU0lPTklEPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCOyBVc2VyU2Vzc2lvbkZpbHRlci5zZXNzaW9uSWQ9RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUINCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1408181</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Length" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTQwODE4MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAyMSBKYW4gMjAxMyAxMjozMDo0NCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMTQwODE4MS0xMzU4NzcxNDQ0MDAwIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTQwODE4MQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpMYXN0LU1vZGlmaWVkOiBNb24sIDIxIEphbiAyMDEzIDEyOjMwOjQ0IEdNVA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6IFcvIjE0MDgxODEtMTM1ODc3MTQ0NDAwMCINClNlcnZlcjogTWljcm9zb2Z0LUlJUy83LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KWC1GUkFNRS1PUFRJT05TOiBTQU1FT1JJR0lODQpEYXRlOiBXZWQsIDI3IEZlYiAyMDE5IDExOjE4OjU3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="23" hostname="demo.borland.com" path="/InsuranceWebExtJS/javascript/serializer.js" url="http://demo.borland.com/InsuranceWebExtJS/javascript/serializer.js" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15237" connectionId="1852" origin="HTML" encodingType="ANSI" ordinal="4" startDateTime="2019-02-27T16:49:29.185+05:30" startTime="3827" endTime="3995" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Referer" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9JbnN1cmFuY2VXZWJFeHRKUy9qYXZhc2NyaXB0L3NlcmlhbGl6ZXIuanMgSFRUUC8xLjENClJlZmVyZXI6IGh0dHA6Ly9kZW1vLmJvcmxhbmQuY29tL0luc3VyYW5jZVdlYkV4dEpTL2FnZW50X2xvb2t1cC5qc2YNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Mi4wLjM2MjYuMTE5IFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQWNjZXB0OiAqLyoNCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkhvc3Q6IGRlbW8uYm9ybGFuZC5jb20NCkNvb2tpZTogSlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1601</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Length" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTYwMQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMSBEZWMgMjAxMiAwOTo0MDo0NCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMTYwMS0xMzU1MjE4ODQ0MDAwIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTYwMQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpMYXN0LU1vZGlmaWVkOiBUdWUsIDExIERlYyAyMDEyIDA5OjQwOjQ0IEdNVA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6IFcvIjE2MDEtMTM1NTIxODg0NDAwMCINClNlcnZlcjogTWljcm9zb2Z0LUlJUy83LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KWC1GUkFNRS1PUFRJT05TOiBTQU1FT1JJR0lODQpEYXRlOiBXZWQsIDI3IEZlYiAyMDE5IDExOjE4OjU3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>DQpmdW5jdGlvbiBlbmNvZGUodHlwZSwgb2JqKXsNCglpZih0eXBlID09ICdqc29uJyl7CQ0KCQlyZXR1cm4gRXh0LmVuY29kZShvYmopOw0KCX0NCgllbHNlew0KCQl2YXIgcmV0ID0gIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCI/PjxkYXRhc2V0PiI7DQoJCWZvcihpIGluIG9iail7DQoJCQlyZXQgPSByZXQrIjwiK2krIj4iK29ialtpXSsiPC8iK2krIj4iOwkJCQ0KCQl9DQoJCXJldCA9IHJldCsiPC9kYXRhc2V0PiI7DQoJCXJldHVybiByZXQ7DQoJfQ0KfQ0KDQpmdW5jdGlvbiBkZWNvZGUodHlwZSwgdG9EZWNvZGUpew0KCWlmKHR5cGUgPT0gJ2pzb24nKXsJCQkJDQoJCXJldHVybiBFeHQuZGVjb2RlKHRvRGVjb2RlKTsJCQ0KCX0NCgllbHNlew0KCQlpZiAodHlwZW9mIERPTVBhcnNlciA9PSAidW5kZWZpbmVkIikgew0KCQkJdmFyIHhtbG9iamVjdCA9IG5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MRE9NIik7DQoJCQl4bWxvYmplY3QuYXN5bmM9ImZhbHNlIjsNCgkJCXhtbG9iamVjdC5sb2FkWE1MKHRvRGVjb2RlKTsNCgkJCXZhciByb290ID0geG1sb2JqZWN0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkYXRhc2V0JylbMF07DQoJCQkNCgkJCXZhciB4ID0gbmV3IEFycmF5KCk7DQoJCQlmb3IgKHZhciBub2RlID0gMDsgbm9kZSA8IHJvb3QuY2hpbGROb2Rlcy5sZW5ndGg7IG5vZGUrKykgew0KCQkJCXZhciBuID0gcm9vdC5jaGlsZE5vZGVzLml0ZW0obm9kZSk7DQoJCQkJZm9yICh2YXIgbm9kZTIgPSAwOyBub2RlMiA8IG4uY2hpbGROb2Rlcy5sZW5ndGg7IG5vZGUyKyspIHsNCgkJCQkJdmFyIG4yID0gbi5jaGlsZE5vZGVzW25vZGUyXTsNCgkJCQkJdmFyIHRhZyA9IG4yLm5vZGVOYW1lOwkJDQoJCQkJCXZhciB2YWx1ZSA9IG4yLnRleHQ7CQkJCQkNCgkJCQkJaWYoeFtub2RlXSA9PSBudWxsKQ0KCQkJCQkJeFtub2RlXSA9IG5ldyBPYmplY3QoKTsNCgkJCQkJeFtub2RlXVtuMi5ub2RlTmFtZV0gPSAgbjIudGV4dDsJCQkJDQoJCQkJfQkJCQ0KCQkJfQ0KCQkJcmV0dXJuKHgpOw0KCQl9DQoJCWVsc2V7CQkNCgkJCXZhciB4bWxvYmplY3QgPSAobmV3IERPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcodG9EZWNvZGUsICJ0ZXh0L3htbCIpOw0KCQkJdmFyIHJvb3QgPSB4bWxvYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RhdGFzZXQnKVswXTsNCgkJCXZhciB4ID0gbmV3IEFycmF5KCk7DQoJCQlmb3IgKHZhciBub2RlID0gMDsgbm9kZSA8IHJvb3QuY2hpbGROb2Rlcy5sZW5ndGg7IG5vZGUrKykgew0KCQkJCXZhciBuID0gcm9vdC5jaGlsZE5vZGVzLml0ZW0obm9kZSk7CQkJDQoJCQkJZm9yICh2YXIgbm9kZTIgPSAwOyBub2RlMiA8IG4uY2hpbGROb2Rlcy5sZW5ndGg7IG5vZGUyKyspIHsNCgkJCQkJdmFyIG4yID0gbi5jaGlsZE5vZGVzLml0ZW0obm9kZTIpOw0KCQkJCQlpZih4W25vZGVdID09IG51bGwpDQoJCQkJCQl4W25vZGVdID0gbmV3IE9iamVjdCgpOw0KCQkJCQl4W25vZGVdW24yLmxvY2FsTmFtZV0gPSAgbjIudGV4dENvbnRlbnQ7CQkJCQ0KCQkJCX0JCQkNCgkJCX0NCgkJCXJldHVybih4KTsNCgkJfQ0KCX0NCn0=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="24" hostname="demo.borland.com" path="/InsuranceWebExtJS/javascript/agentTable.js" url="http://demo.borland.com/InsuranceWebExtJS/javascript/agentTable.js" ip="143.186.120.171" port="80" client_ip="192.168.0.123" client_port="15238" connectionId="1860" origin="HTML" encodingType="ANSI" ordinal="5" startDateTime="2019-02-27T16:49:29.185+05:30" startTime="3827" endTime="4016" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Referer" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2RlbW8uYm9ybGFuZC5jb20vSW5zdXJhbmNlV2ViRXh0SlMvYWdlbnRfbG9va3VwLmpzZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzcyLjAuMzYyNi4xMTkgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGVtby5ib3JsYW5kLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFC</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9JbnN1cmFuY2VXZWJFeHRKUy9qYXZhc2NyaXB0L2FnZW50VGFibGUuanMgSFRUUC8xLjENClJlZmVyZXI6IGh0dHA6Ly9kZW1vLmJvcmxhbmQuY29tL0luc3VyYW5jZVdlYkV4dEpTL2FnZW50X2xvb2t1cC5qc2YNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83Mi4wLjM2MjYuMTE5IFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQWNjZXB0OiAqLyoNCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCkhvc3Q6IGRlbW8uYm9ybGFuZC5jb20NCkNvb2tpZTogSlNFU1NJT05JRD1FODJGQUZFQjkxMEY3OEZDMzlFRkY1NzFFRTBGOUExQjsgVXNlclNlc3Npb25GaWx0ZXIuc2Vzc2lvbklkPUU4MkZBRkVCOTEwRjc4RkMzOUVGRjU3MUVFMEY5QTFCDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="UserSessionFilter.sessionId" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RTgyRkFGRUI5MTBGNzhGQzM5RUZGNTcxRUUwRjlBMUI=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>3863</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Length" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Mzg2Mw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAyMiBKYW4gMjAxMyAxMDozNzo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMzg2My0xMzU4ODUxMDcyMDAwIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy83LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-FRAME-OPTIONS" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAyNyBGZWIgMjAxOSAxMToxODo1NyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMzg2Mw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpMYXN0LU1vZGlmaWVkOiBUdWUsIDIyIEphbiAyMDEzIDEwOjM3OjUyIEdNVA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6IFcvIjM4NjMtMTM1ODg1MTA3MjAwMCINClNlcnZlcjogTWljcm9zb2Z0LUlJUy83LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KWC1GUkFNRS1PUFRJT05TOiBTQU1FT1JJR0lODQpEYXRlOiBXZWQsIDI3IEZlYiAyMDE5IDExOjE4OjU3IEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RXh0Lm9uUmVhZHkoZnVuY3Rpb24oKXsNCgkNCglkb2N1bWVudC5sb2NhdGlvbi5ocmVmLm1hdGNoKC94bWwvKSA/IHJlc3VtZUZ1bmMoInhtbCIpIDogcmVzdW1lRnVuYyh7cmVzcG9uc2VUZXh0OiJhcHBsaWNhdGlvbi9qc29uIn0pOw0KICAgIA0KICAgIGZ1bmN0aW9uIHJlc3VtZUZ1bmMobXNnKXsNCiAgICAJDQogICAgCXZhciByZWNvcmREZWYgPSBFeHQuZGF0YS5SZWNvcmQuY3JlYXRlKA0KICAgIAkJCVsNCiAgICAJCQkge25hbWU6ICdGaXJzdE5hbWUnLCBtYXBwaW5nOiAnRmlyc3ROYW1lJywgdHlwZTonc3RyaW5nJyB9LA0KICAgIAkJCSB7bmFtZTogJ0xhc3ROYW1lJywgbWFwcGluZzogJ0xhc3ROYW1lJywgdHlwZTonc3RyaW5nJ30sDQogICAgCQkJIHtuYW1lOiAnQ2l0eScsIG1hcHBpbmc6ICdDaXR5JywgdHlwZTonc3RyaW5nJ30sDQogICAgCQkJIHtuYW1lOiAnU3RhdGUnLCBtYXBwaW5nOiAnU3RhdGUnLCB0eXBlOidzdHJpbmcnfSwNCiAgICAJCQkge25hbWU6ICdBZGRyZXNzJywgbWFwcGluZzogJ0FkZHJlc3MnLCB0eXBlOidzdHJpbmcnfSwNCiAgICAJCQkge25hbWU6ICdaaXBDb2RlJywgbWFwcGluZzogJ1ppcENvZGUnLCB0eXBlOidzdHJpbmcnfSwNCiAgICAJCQkge25hbWU6ICdQaG9uZScsIG1hcHBpbmc6ICdQaG9uZScsIHR5cGU6J3N0cmluZyd9DQogICAgCQkJXQ0KICAgIAkJKTsNCiAgICAJCQ0KICAgIAkJdmFyIHNlcmlhbGl6YXRpb25IdHRwUHJveHkgPSBuZXcgRXh0LmRhdGEuSHR0cFByb3h5KHsNCiAgICAJCQl1cmw6ICdzZXJpYWxpemF0aW9uJywNCiAgICAJCQltZXRob2Q6ICdQT1NUJw0KICAgIAkJfSk7DQogICAgCQlzZXJpYWxpemF0aW9uSHR0cFByb3h5Lm9uICggJ2JlZm9yZWxvYWQnLCBmdW5jdGlvbiAoIHQsIHAgKSB7IHAubm9jYWNoZSA9IDE7IHAubWV0aG9kID0gbXNnOyB9ICk7DQoNCiAgICAJCXZhciBzdG9yZV9BY3Rpb25JdGVtcyA9IG5ldyBFeHQuZGF0YS5TdG9yZSh7DQogICAgCQkJcHJveHk6IHNlcmlhbGl6YXRpb25IdHRwUHJveHksICAgIAkJDQogICAgCQkJYXV0b0xvYWQ6IGZhbHNlDQogICAgCQl9KTsgICAgCQkgDQogICAgCQkNCiAgICAJCXZhciBxdW90ZUh0dHBQcm94eSA9IG5ldyBFeHQuZGF0YS5IdHRwUHJveHkoew0KICAgIAkJCXVybDogZG9jdW1lbnQubG9jYXRpb24uaHJlZi5tYXRjaCgveG1sLykgPyAnZGF0YS9hZ2VudFhtbERhdGEuanNmJyA6ICdkYXRhL2FnZW50RGF0YS5qc2YnLA0KICAgIAkJCSBtZXRob2Q6ICdQT1NUJw0KICAgIAkJfSk7DQogICAgCQlxdW90ZUh0dHBQcm94eS5vbiAoICdiZWZvcmVsb2FkJywgZnVuY3Rpb24gKCB0LCBwICkgeyBwLm5vY2FjaGUgPSAxOyBwLm1ldGhvZCA9IG1zZzsgfSApOw0KICAgIAkJcXVvdGVIdHRwUHJveHkuZ2V0Q29ubmVjdGlvbigpLm9uKCdyZXF1ZXN0ZXhjZXB0aW9uJywgcmVxdWVzdEZhaWxlZCk7ICAgIAkJICAgCQ0KICAgIAkJdmFyIGRhdGFSZWFkZXI7DQogICAgCQlpZihtc2cgPT0gInhtbCIpeyAgICAJCQkNCiAgICAJCQlkYXRhUmVhZGVyID0gbmV3IEV4dC5kYXRhLlhtbFJlYWRlcih7cmVjb3JkOiAncm93J30sIHJlY29yZERlZiApOw0KICAgIAkJfQ0KICAgIAkJZWxzZQ0KICAgIAkJCWRhdGFSZWFkZXIgPSBuZXcgRXh0LmRhdGEuSnNvblJlYWRlcih7cm9vdDogJyd9LAlyZWNvcmREZWYgKTsNCiAgICAJCQ0KICAgIAkJdmFyIHF1b3RlRGF0YVN0b3JlID0gbmV3IEV4dC5kYXRhLlN0b3JlKHsJCQ0KICAgIAkJCXByb3h5OiBxdW90ZUh0dHBQcm94eSwNCiAgICAJCQlyZWFkZXI6IGRhdGFSZWFkZXIsDQogICAgCQkJYXV0b0xvYWQ6IHRydWUNCiAgICAJCX0pOw0KICAgIAkJDQogICAgCQlxdW90ZURhdGFTdG9yZS5vbignbG9hZGV4Y2VwdGlvbicsIGxvYWRGYWlsZWRNb2RlbCk7DQogICAgCQkJCQkJIA0KICAgIAkgICAgdmFyIGdyaWQgPSBuZXcgRXh0LmdyaWQuR3JpZFBhbmVsKHsNCiAgICAJCQlzdG9yZTogcXVvdGVEYXRhU3RvcmUsDQogICAgCQkJY29sdW1uczogWw0KICAgIAkJCSAgICAgICAgICB7aGVhZGVyOiAnRmlyc3QgbmFtZScsICAJZGF0YUluZGV4OiAnRmlyc3ROYW1lJywgc29ydGFibGU6IHRydWUsIHdpZHRoOjgwIH0sDQogICAgCQkJICAgICAgICAgIHtoZWFkZXI6ICdMYXN0IG5hbWUnLCAgCWRhdGFJbmRleDogJ0xhc3ROYW1lJywgc29ydGFibGU6IHRydWUsIHdpZHRoOjEyMCB9LA0KICAgIAkJCSAgICAgICAgICB7aGVhZGVyOiAnQ2l0eScsIAlkYXRhSW5kZXg6ICdDaXR5Jywgc29ydGFibGU6IHRydWV9LA0KICAgIAkJCSAgICAgICAgICB7aGVhZGVyOiAnU3RhdGUnLCAgCWRhdGFJbmRleDogJ1N0YXRlJywgc29ydGFibGU6IHRydWUsIHdpZHRoOjUwfSAgICAJCQkgICAgICAgICAgDQogICAgCQkJICAgICAgICAgIF0sDQogICAgCQkJd2lkdGg6IDM3MCwNCiAgICAJCSAgICBsaXN0ZW5lcnM6ew0KICAgIAkJCSAgCXJvd2RibGNsaWNrIDogZnVuY3Rpb24oZ3JpZCxyb3dJbmRleCl7ICAgIAkgICAgCQ0KICAgIAkgICAgCQkJcmVjID0gZ3JpZC5nZXRTdG9yZSgpLmdldEF0KHJvd0luZGV4KTsgICAgCSAgICAJCQkNCiAgICAJICAgIAkJICB2YXIgd2luID0gbmV3IEV4dC5XaW5kb3coew0KCQkJCSAgICAgIHdpZHRoOjQyMCwNCgkJCQkgICAgICBoZWlnaHQ6MTUwLA0KCQkJCSAgICAgIHRpdGxlOiIiK3JlYy5nZXQoJ0ZpcnN0TmFtZScpKyIgIityZWMuZ2V0KCdMYXN0TmFtZScpLA0KCQkJCSAgICAgIGl0ZW1zOg0KCQkJCSAgICAgIFsNCgkJCQkJCW5ldyBFeHQuUGFuZWwoew0KCQkJCQkJCWF1dG9IZWlnaHQ6ZmFsc2UsDQoJCQkJCQkJaGVpZ2h0OiAxMzAsDQoJCQkJCQkJaHRtbDogIjx0YWJsZSBzdHlsZT0nYm9yZGVyLXNwYWNpbmc6NXB0O2ZvbnQtc2l6ZTptZWRpdW0nID48dHI+PHRkPjxiPk5hbWU6PC9iPjwvdGQ+PHRkPiIrcmVjLmdldCgnRmlyc3ROYW1lJykrIiAiK3JlYy5nZXQoJ0xhc3ROYW1lJykrIjwvdGQ+PC90cj48dHI+PHRkPjxiPkFkZHJlc3M6IDwvYj48L3RkPjx0ZD4iK3JlYy5nZXQoJ0FkZHJlc3MnKSsiLCIrcmVjLmdldCgnQ2l0eScpKyIgIityZWMuZ2V0KCdaaXBDb2RlJykrIjwvdGQ+PC90cj48dHI+PHRkPjxiPlN0YXRlOiA8L2I+PC90ZD48dGQ+IityZWMuZ2V0KCdTdGF0ZScpKyI8L3RkPjwvdHI+PHRyPjx0ZD48Yj5QaG9uZTogPC9iPjwvdGQ+PHRkPiIrcmVjLmdldCgnUGhvbmUnKSsiPC90ZD48L3RyPjwvdGFibGU+Ig0KCQkJCQkJfSkNCgkJCQkgICAgICBdDQoJCQkJICAgfSk7DQogICAgCSAgICAJICAgd2luLnNob3coKTsNCiAgICAJCQkgICAgICAJCX0gICAgCQkJICAgICAgCQkNCiAgICAJCQkgICAgICAJfSwNCiAgICAJICAgICAgICByZW5kZXJUbzogJ2FnZW50VGFibGVESVYnLA0KICAgIAkJCXRpdGxlOiAnSW5zdXJhbmNlIENvLiBBZ2VudHMgKCcrbXNnLnJlc3BvbnNlVGV4dCsnKScsCQkNCiAgICAJCQlhdXRvSGVpZ2h0OiB0cnVlLA0KICAgIAkJCWZyYW1lOiB0cnVlDQogICAgCQl9KTsgICAgCSAgIA0KICAgIAkgICAgZ3JpZC5yZW5kZXIoKTsgICAgCSAgICAJDQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVxdWVzdEZhaWxlZChjb25uZWN0aW9uLCByZXNwb25zZSwgb3B0aW9ucykgew0KCQlFeHQuTWVzc2FnZUJveC5hbGVydCgnRXJyb3IgTWVzc2FnZScsIA0KCQkJCSJQbGVhc2UgY29udGFjdCBzdXBwb3J0IHdpdGggdGhlIGZvbGxvd2luZzogIiArIA0KCQkJCSJTdGF0dXM6ICIgKyByZXNwb25zZS5zdGF0dXMgKyANCgkJCQkiLCBTdGF0dXMgVGV4dDogIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpOw0KCX0NCiAgICANCiAgICBmdW5jdGlvbiBsb2FkRmFpbGVkTW9kZWwocHJveHksIG9wdGlvbnMsIHJlc3BvbnNlLCBlcnJvcikgew0KCQlhbGVydChlcnJvcik7DQogICAgfQ0KDQp9KTs=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
</HTTPSnapshot>